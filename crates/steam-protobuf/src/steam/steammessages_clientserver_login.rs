// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]
#![allow(unused_attributes)]
#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_clientserver_login.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientHeartBeat {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientHeartBeat {
    fn default() -> &'a CMsgClientHeartBeat {
        <CMsgClientHeartBeat as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientHeartBeat {
    pub fn new() -> CMsgClientHeartBeat {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgClientHeartBeat {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientHeartBeat {
        CMsgClientHeartBeat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientHeartBeat>(
                "CMsgClientHeartBeat",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientHeartBeat {
        static instance: ::protobuf::rt::LazyV2<CMsgClientHeartBeat> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientHeartBeat::new)
    }
}

impl ::protobuf::Clear for CMsgClientHeartBeat {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientHeartBeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientHeartBeat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientServerTimestampRequest {
    // message fields
    client_request_timestamp: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientServerTimestampRequest {
    fn default() -> &'a CMsgClientServerTimestampRequest {
        <CMsgClientServerTimestampRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientServerTimestampRequest {
    pub fn new() -> CMsgClientServerTimestampRequest {
        ::std::default::Default::default()
    }

    // optional uint64 client_request_timestamp = 1;

    pub fn get_client_request_timestamp(&self) -> u64 {
        self.client_request_timestamp.unwrap_or(0)
    }
    pub fn clear_client_request_timestamp(&mut self) {
        self.client_request_timestamp = ::std::option::Option::None;
    }

    pub fn has_client_request_timestamp(&self) -> bool {
        self.client_request_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_request_timestamp(&mut self, v: u64) {
        self.client_request_timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientServerTimestampRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_request_timestamp = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_request_timestamp {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_request_timestamp {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientServerTimestampRequest {
        CMsgClientServerTimestampRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "client_request_timestamp",
                |m: &CMsgClientServerTimestampRequest| &m.client_request_timestamp,
                |m: &mut CMsgClientServerTimestampRequest| &mut m.client_request_timestamp,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientServerTimestampRequest>(
                "CMsgClientServerTimestampRequest",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientServerTimestampRequest {
        static instance: ::protobuf::rt::LazyV2<CMsgClientServerTimestampRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientServerTimestampRequest::new)
    }
}

impl ::protobuf::Clear for CMsgClientServerTimestampRequest {
    fn clear(&mut self) {
        self.client_request_timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientServerTimestampRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientServerTimestampRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientServerTimestampResponse {
    // message fields
    client_request_timestamp: ::std::option::Option<u64>,
    server_timestamp_ms: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientServerTimestampResponse {
    fn default() -> &'a CMsgClientServerTimestampResponse {
        <CMsgClientServerTimestampResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientServerTimestampResponse {
    pub fn new() -> CMsgClientServerTimestampResponse {
        ::std::default::Default::default()
    }

    // optional uint64 client_request_timestamp = 1;

    pub fn get_client_request_timestamp(&self) -> u64 {
        self.client_request_timestamp.unwrap_or(0)
    }
    pub fn clear_client_request_timestamp(&mut self) {
        self.client_request_timestamp = ::std::option::Option::None;
    }

    pub fn has_client_request_timestamp(&self) -> bool {
        self.client_request_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_request_timestamp(&mut self, v: u64) {
        self.client_request_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint64 server_timestamp_ms = 2;

    pub fn get_server_timestamp_ms(&self) -> u64 {
        self.server_timestamp_ms.unwrap_or(0)
    }
    pub fn clear_server_timestamp_ms(&mut self) {
        self.server_timestamp_ms = ::std::option::Option::None;
    }

    pub fn has_server_timestamp_ms(&self) -> bool {
        self.server_timestamp_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_timestamp_ms(&mut self, v: u64) {
        self.server_timestamp_ms = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientServerTimestampResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_request_timestamp = ::std::option::Option::Some(tmp);
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.server_timestamp_ms = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_request_timestamp {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.server_timestamp_ms {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_request_timestamp {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.server_timestamp_ms {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientServerTimestampResponse {
        CMsgClientServerTimestampResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "client_request_timestamp",
                |m: &CMsgClientServerTimestampResponse| &m.client_request_timestamp,
                |m: &mut CMsgClientServerTimestampResponse| &mut m.client_request_timestamp,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "server_timestamp_ms",
                |m: &CMsgClientServerTimestampResponse| &m.server_timestamp_ms,
                |m: &mut CMsgClientServerTimestampResponse| &mut m.server_timestamp_ms,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientServerTimestampResponse>(
                "CMsgClientServerTimestampResponse",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientServerTimestampResponse {
        static instance: ::protobuf::rt::LazyV2<CMsgClientServerTimestampResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientServerTimestampResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientServerTimestampResponse {
    fn clear(&mut self) {
        self.client_request_timestamp = ::std::option::Option::None;
        self.server_timestamp_ms = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientServerTimestampResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientServerTimestampResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientSecret {
    // message fields
    version: ::std::option::Option<u32>,
    appid: ::std::option::Option<u32>,
    deviceid: ::std::option::Option<u32>,
    nonce: ::std::option::Option<u64>,
    hmac: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSecret {
    fn default() -> &'a CMsgClientSecret {
        <CMsgClientSecret as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSecret {
    pub fn new() -> CMsgClientSecret {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;

    pub fn get_version(&self) -> u32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 deviceid = 3;

    pub fn get_deviceid(&self) -> u32 {
        self.deviceid.unwrap_or(0)
    }
    pub fn clear_deviceid(&mut self) {
        self.deviceid = ::std::option::Option::None;
    }

    pub fn has_deviceid(&self) -> bool {
        self.deviceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deviceid(&mut self, v: u32) {
        self.deviceid = ::std::option::Option::Some(v);
    }

    // optional fixed64 nonce = 4;

    pub fn get_nonce(&self) -> u64 {
        self.nonce.unwrap_or(0)
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // optional bytes hmac = 5;

    pub fn get_hmac(&self) -> &[u8] {
        match self.hmac.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_hmac(&mut self) {
        self.hmac.clear();
    }

    pub fn has_hmac(&self) -> bool {
        self.hmac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hmac(&mut self, v: ::std::vec::Vec<u8>) {
        self.hmac = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hmac(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hmac.is_none() {
            self.hmac.set_default();
        }
        self.hmac.as_mut().unwrap()
    }

    // Take field
    pub fn take_hmac(&mut self) -> ::std::vec::Vec<u8> {
        self.hmac.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CMsgClientSecret {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = ::std::option::Option::Some(tmp);
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.deviceid = ::std::option::Option::Some(tmp);
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.nonce = ::std::option::Option::Some(tmp);
                }
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.hmac)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.deviceid {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.nonce {
            my_size += 9;
        }
        if let Some(ref v) = self.hmac.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.deviceid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.nonce {
            os.write_fixed64(4, v)?;
        }
        if let Some(ref v) = self.hmac.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSecret {
        CMsgClientSecret::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "version",
                |m: &CMsgClientSecret| &m.version,
                |m: &mut CMsgClientSecret| &mut m.version,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "appid",
                |m: &CMsgClientSecret| &m.appid,
                |m: &mut CMsgClientSecret| &mut m.appid,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "deviceid",
                |m: &CMsgClientSecret| &m.deviceid,
                |m: &mut CMsgClientSecret| &mut m.deviceid,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed64,
            >(
                "nonce",
                |m: &CMsgClientSecret| &m.nonce,
                |m: &mut CMsgClientSecret| &mut m.nonce,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "hmac",
                |m: &CMsgClientSecret| &m.hmac,
                |m: &mut CMsgClientSecret| &mut m.hmac,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientSecret>(
                "CMsgClientSecret",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSecret {
        static instance: ::protobuf::rt::LazyV2<CMsgClientSecret> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientSecret::new)
    }
}

impl ::protobuf::Clear for CMsgClientSecret {
    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.deviceid = ::std::option::Option::None;
        self.nonce = ::std::option::Option::None;
        self.hmac.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSecret {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSecret {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientLogon {
    // message fields
    protocol_version: ::std::option::Option<u32>,
    deprecated_obfustucated_private_ip: ::std::option::Option<u32>,
    cell_id: ::std::option::Option<u32>,
    last_session_id: ::std::option::Option<u32>,
    client_package_version: ::std::option::Option<u32>,
    client_language: ::protobuf::SingularField<::std::string::String>,
    client_os_type: ::std::option::Option<u32>,
    should_remember_password: ::std::option::Option<bool>,
    wine_version: ::protobuf::SingularField<::std::string::String>,
    deprecated_10: ::std::option::Option<u32>,
    pub obfuscated_private_ip: ::protobuf::SingularPtrField<super::steammessages_base::CMsgIPAddress>,
    deprecated_public_ip: ::std::option::Option<u32>,
    qos_level: ::std::option::Option<u32>,
    client_supplied_steam_id: ::std::option::Option<u64>,
    pub public_ip: ::protobuf::SingularPtrField<super::steammessages_base::CMsgIPAddress>,
    machine_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    launcher_type: ::std::option::Option<u32>,
    ui_mode: ::std::option::Option<u32>,
    chat_mode: ::std::option::Option<u32>,
    steam2_auth_ticket: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    email_address: ::protobuf::SingularField<::std::string::String>,
    rtime32_account_creation: ::std::option::Option<u32>,
    account_name: ::protobuf::SingularField<::std::string::String>,
    password: ::protobuf::SingularField<::std::string::String>,
    game_server_token: ::protobuf::SingularField<::std::string::String>,
    login_key: ::protobuf::SingularField<::std::string::String>,
    was_converted_deprecated_msg: ::std::option::Option<bool>,
    anon_user_target_account_name: ::protobuf::SingularField<::std::string::String>,
    resolved_user_steam_id: ::std::option::Option<u64>,
    eresult_sentryfile: ::std::option::Option<i32>,
    sha_sentryfile: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    auth_code: ::protobuf::SingularField<::std::string::String>,
    otp_type: ::std::option::Option<i32>,
    otp_value: ::std::option::Option<u32>,
    otp_identifier: ::protobuf::SingularField<::std::string::String>,
    steam2_ticket_request: ::std::option::Option<bool>,
    sony_psn_ticket: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    sony_psn_service_id: ::protobuf::SingularField<::std::string::String>,
    create_new_psn_linked_account_if_needed: ::std::option::Option<bool>,
    sony_psn_name: ::protobuf::SingularField<::std::string::String>,
    game_server_app_id: ::std::option::Option<i32>,
    steamguard_dont_remember_computer: ::std::option::Option<bool>,
    machine_name: ::protobuf::SingularField<::std::string::String>,
    machine_name_userchosen: ::protobuf::SingularField<::std::string::String>,
    country_override: ::protobuf::SingularField<::std::string::String>,
    is_steam_box: ::std::option::Option<bool>,
    client_instance_id: ::std::option::Option<u64>,
    two_factor_code: ::protobuf::SingularField<::std::string::String>,
    supports_rate_limit_response: ::std::option::Option<bool>,
    web_logon_nonce: ::protobuf::SingularField<::std::string::String>,
    priority_reason: ::std::option::Option<i32>,
    pub embedded_client_secret: ::protobuf::SingularPtrField<CMsgClientSecret>,
    disable_partner_autogrants: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientLogon {
    fn default() -> &'a CMsgClientLogon {
        <CMsgClientLogon as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLogon {
    pub fn new() -> CMsgClientLogon {
        ::std::default::Default::default()
    }

    // optional uint32 protocol_version = 1;

    pub fn get_protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }
    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    // optional uint32 deprecated_obfustucated_private_ip = 2;

    pub fn get_deprecated_obfustucated_private_ip(&self) -> u32 {
        self.deprecated_obfustucated_private_ip.unwrap_or(0)
    }
    pub fn clear_deprecated_obfustucated_private_ip(&mut self) {
        self.deprecated_obfustucated_private_ip = ::std::option::Option::None;
    }

    pub fn has_deprecated_obfustucated_private_ip(&self) -> bool {
        self.deprecated_obfustucated_private_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_obfustucated_private_ip(&mut self, v: u32) {
        self.deprecated_obfustucated_private_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 cell_id = 3;

    pub fn get_cell_id(&self) -> u32 {
        self.cell_id.unwrap_or(0)
    }
    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: u32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional uint32 last_session_id = 4;

    pub fn get_last_session_id(&self) -> u32 {
        self.last_session_id.unwrap_or(0)
    }
    pub fn clear_last_session_id(&mut self) {
        self.last_session_id = ::std::option::Option::None;
    }

    pub fn has_last_session_id(&self) -> bool {
        self.last_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_session_id(&mut self, v: u32) {
        self.last_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_package_version = 5;

    pub fn get_client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }
    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional string client_language = 6;

    pub fn get_client_language(&self) -> &str {
        match self.client_language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_client_language(&mut self) {
        self.client_language.clear();
    }

    pub fn has_client_language(&self) -> bool {
        self.client_language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_language(&mut self, v: ::std::string::String) {
        self.client_language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_language(&mut self) -> &mut ::std::string::String {
        if self.client_language.is_none() {
            self.client_language.set_default();
        }
        self.client_language.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_language(&mut self) -> ::std::string::String {
        self.client_language
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 client_os_type = 7;

    pub fn get_client_os_type(&self) -> u32 {
        self.client_os_type.unwrap_or(0)
    }
    pub fn clear_client_os_type(&mut self) {
        self.client_os_type = ::std::option::Option::None;
    }

    pub fn has_client_os_type(&self) -> bool {
        self.client_os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_os_type(&mut self, v: u32) {
        self.client_os_type = ::std::option::Option::Some(v);
    }

    // optional bool should_remember_password = 8;

    pub fn get_should_remember_password(&self) -> bool {
        self.should_remember_password.unwrap_or(false)
    }
    pub fn clear_should_remember_password(&mut self) {
        self.should_remember_password = ::std::option::Option::None;
    }

    pub fn has_should_remember_password(&self) -> bool {
        self.should_remember_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_should_remember_password(&mut self, v: bool) {
        self.should_remember_password = ::std::option::Option::Some(v);
    }

    // optional string wine_version = 9;

    pub fn get_wine_version(&self) -> &str {
        match self.wine_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_wine_version(&mut self) {
        self.wine_version.clear();
    }

    pub fn has_wine_version(&self) -> bool {
        self.wine_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wine_version(&mut self, v: ::std::string::String) {
        self.wine_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wine_version(&mut self) -> &mut ::std::string::String {
        if self.wine_version.is_none() {
            self.wine_version.set_default();
        }
        self.wine_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_wine_version(&mut self) -> ::std::string::String {
        self.wine_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 deprecated_10 = 10;

    pub fn get_deprecated_10(&self) -> u32 {
        self.deprecated_10.unwrap_or(0)
    }
    pub fn clear_deprecated_10(&mut self) {
        self.deprecated_10 = ::std::option::Option::None;
    }

    pub fn has_deprecated_10(&self) -> bool {
        self.deprecated_10.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_10(&mut self, v: u32) {
        self.deprecated_10 = ::std::option::Option::Some(v);
    }

    // optional .CMsgIPAddress obfuscated_private_ip = 11;

    pub fn get_obfuscated_private_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.obfuscated_private_ip
            .as_ref()
            .unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_obfuscated_private_ip(&mut self) {
        self.obfuscated_private_ip.clear();
    }

    pub fn has_obfuscated_private_ip(&self) -> bool {
        self.obfuscated_private_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_obfuscated_private_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.obfuscated_private_ip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_obfuscated_private_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        if self.obfuscated_private_ip.is_none() {
            self.obfuscated_private_ip.set_default();
        }
        self.obfuscated_private_ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_obfuscated_private_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.obfuscated_private_ip
            .take()
            .unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional uint32 deprecated_public_ip = 20;

    pub fn get_deprecated_public_ip(&self) -> u32 {
        self.deprecated_public_ip.unwrap_or(0)
    }
    pub fn clear_deprecated_public_ip(&mut self) {
        self.deprecated_public_ip = ::std::option::Option::None;
    }

    pub fn has_deprecated_public_ip(&self) -> bool {
        self.deprecated_public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_public_ip(&mut self, v: u32) {
        self.deprecated_public_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 qos_level = 21;

    pub fn get_qos_level(&self) -> u32 {
        self.qos_level.unwrap_or(0)
    }
    pub fn clear_qos_level(&mut self) {
        self.qos_level = ::std::option::Option::None;
    }

    pub fn has_qos_level(&self) -> bool {
        self.qos_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_qos_level(&mut self, v: u32) {
        self.qos_level = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_supplied_steam_id = 22;

    pub fn get_client_supplied_steam_id(&self) -> u64 {
        self.client_supplied_steam_id.unwrap_or(0)
    }
    pub fn clear_client_supplied_steam_id(&mut self) {
        self.client_supplied_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_supplied_steam_id(&self) -> bool {
        self.client_supplied_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_supplied_steam_id(&mut self, v: u64) {
        self.client_supplied_steam_id = ::std::option::Option::Some(v);
    }

    // optional .CMsgIPAddress public_ip = 23;

    pub fn get_public_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.public_ip
            .as_ref()
            .unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_public_ip(&mut self) {
        self.public_ip.clear();
    }

    pub fn has_public_ip(&self) -> bool {
        self.public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.public_ip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        if self.public_ip.is_none() {
            self.public_ip.set_default();
        }
        self.public_ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.public_ip
            .take()
            .unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional bytes machine_id = 30;

    pub fn get_machine_id(&self) -> &[u8] {
        match self.machine_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_machine_id(&mut self) {
        self.machine_id.clear();
    }

    pub fn has_machine_id(&self) -> bool {
        self.machine_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.machine_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.machine_id.is_none() {
            self.machine_id.set_default();
        }
        self.machine_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine_id(&mut self) -> ::std::vec::Vec<u8> {
        self.machine_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 launcher_type = 31;

    pub fn get_launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0u32)
    }
    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 ui_mode = 32;

    pub fn get_ui_mode(&self) -> u32 {
        self.ui_mode.unwrap_or(0u32)
    }
    pub fn clear_ui_mode(&mut self) {
        self.ui_mode = ::std::option::Option::None;
    }

    pub fn has_ui_mode(&self) -> bool {
        self.ui_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ui_mode(&mut self, v: u32) {
        self.ui_mode = ::std::option::Option::Some(v);
    }

    // optional uint32 chat_mode = 33;

    pub fn get_chat_mode(&self) -> u32 {
        self.chat_mode.unwrap_or(0u32)
    }
    pub fn clear_chat_mode(&mut self) {
        self.chat_mode = ::std::option::Option::None;
    }

    pub fn has_chat_mode(&self) -> bool {
        self.chat_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_mode(&mut self, v: u32) {
        self.chat_mode = ::std::option::Option::Some(v);
    }

    // optional bytes steam2_auth_ticket = 41;

    pub fn get_steam2_auth_ticket(&self) -> &[u8] {
        match self.steam2_auth_ticket.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_steam2_auth_ticket(&mut self) {
        self.steam2_auth_ticket.clear();
    }

    pub fn has_steam2_auth_ticket(&self) -> bool {
        self.steam2_auth_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam2_auth_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.steam2_auth_ticket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steam2_auth_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.steam2_auth_ticket.is_none() {
            self.steam2_auth_ticket.set_default();
        }
        self.steam2_auth_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_steam2_auth_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.steam2_auth_ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string email_address = 42;

    pub fn get_email_address(&self) -> &str {
        match self.email_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_email_address(&mut self) {
        self.email_address.clear();
    }

    pub fn has_email_address(&self) -> bool {
        self.email_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_address(&mut self, v: ::std::string::String) {
        self.email_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email_address(&mut self) -> &mut ::std::string::String {
        if self.email_address.is_none() {
            self.email_address.set_default();
        }
        self.email_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_email_address(&mut self) -> ::std::string::String {
        self.email_address
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 rtime32_account_creation = 43;

    pub fn get_rtime32_account_creation(&self) -> u32 {
        self.rtime32_account_creation.unwrap_or(0)
    }
    pub fn clear_rtime32_account_creation(&mut self) {
        self.rtime32_account_creation = ::std::option::Option::None;
    }

    pub fn has_rtime32_account_creation(&self) -> bool {
        self.rtime32_account_creation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime32_account_creation(&mut self, v: u32) {
        self.rtime32_account_creation = ::std::option::Option::Some(v);
    }

    // optional string account_name = 50;

    pub fn get_account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_account_name(&mut self) {
        self.account_name.clear();
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name.set_default();
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string password = 51;

    pub fn get_password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password.set_default();
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string game_server_token = 52;

    pub fn get_game_server_token(&self) -> &str {
        match self.game_server_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_game_server_token(&mut self) {
        self.game_server_token.clear();
    }

    pub fn has_game_server_token(&self) -> bool {
        self.game_server_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_token(&mut self, v: ::std::string::String) {
        self.game_server_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_game_server_token(&mut self) -> &mut ::std::string::String {
        if self.game_server_token.is_none() {
            self.game_server_token.set_default();
        }
        self.game_server_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_game_server_token(&mut self) -> ::std::string::String {
        self.game_server_token
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string login_key = 60;

    pub fn get_login_key(&self) -> &str {
        match self.login_key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_login_key(&mut self) {
        self.login_key.clear();
    }

    pub fn has_login_key(&self) -> bool {
        self.login_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_login_key(&mut self, v: ::std::string::String) {
        self.login_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_login_key(&mut self) -> &mut ::std::string::String {
        if self.login_key.is_none() {
            self.login_key.set_default();
        }
        self.login_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_login_key(&mut self) -> ::std::string::String {
        self.login_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool was_converted_deprecated_msg = 70;

    pub fn get_was_converted_deprecated_msg(&self) -> bool {
        self.was_converted_deprecated_msg.unwrap_or(false)
    }
    pub fn clear_was_converted_deprecated_msg(&mut self) {
        self.was_converted_deprecated_msg = ::std::option::Option::None;
    }

    pub fn has_was_converted_deprecated_msg(&self) -> bool {
        self.was_converted_deprecated_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_was_converted_deprecated_msg(&mut self, v: bool) {
        self.was_converted_deprecated_msg = ::std::option::Option::Some(v);
    }

    // optional string anon_user_target_account_name = 80;

    pub fn get_anon_user_target_account_name(&self) -> &str {
        match self.anon_user_target_account_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_anon_user_target_account_name(&mut self) {
        self.anon_user_target_account_name.clear();
    }

    pub fn has_anon_user_target_account_name(&self) -> bool {
        self.anon_user_target_account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_anon_user_target_account_name(&mut self, v: ::std::string::String) {
        self.anon_user_target_account_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_anon_user_target_account_name(&mut self) -> &mut ::std::string::String {
        if self.anon_user_target_account_name.is_none() {
            self.anon_user_target_account_name.set_default();
        }
        self.anon_user_target_account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_anon_user_target_account_name(&mut self) -> ::std::string::String {
        self.anon_user_target_account_name
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 resolved_user_steam_id = 81;

    pub fn get_resolved_user_steam_id(&self) -> u64 {
        self.resolved_user_steam_id.unwrap_or(0)
    }
    pub fn clear_resolved_user_steam_id(&mut self) {
        self.resolved_user_steam_id = ::std::option::Option::None;
    }

    pub fn has_resolved_user_steam_id(&self) -> bool {
        self.resolved_user_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resolved_user_steam_id(&mut self, v: u64) {
        self.resolved_user_steam_id = ::std::option::Option::Some(v);
    }

    // optional int32 eresult_sentryfile = 82;

    pub fn get_eresult_sentryfile(&self) -> i32 {
        self.eresult_sentryfile.unwrap_or(0)
    }
    pub fn clear_eresult_sentryfile(&mut self) {
        self.eresult_sentryfile = ::std::option::Option::None;
    }

    pub fn has_eresult_sentryfile(&self) -> bool {
        self.eresult_sentryfile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult_sentryfile(&mut self, v: i32) {
        self.eresult_sentryfile = ::std::option::Option::Some(v);
    }

    // optional bytes sha_sentryfile = 83;

    pub fn get_sha_sentryfile(&self) -> &[u8] {
        match self.sha_sentryfile.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_sha_sentryfile(&mut self) {
        self.sha_sentryfile.clear();
    }

    pub fn has_sha_sentryfile(&self) -> bool {
        self.sha_sentryfile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_sentryfile(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha_sentryfile = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_sentryfile(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha_sentryfile.is_none() {
            self.sha_sentryfile.set_default();
        }
        self.sha_sentryfile.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_sentryfile(&mut self) -> ::std::vec::Vec<u8> {
        self.sha_sentryfile.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string auth_code = 84;

    pub fn get_auth_code(&self) -> &str {
        match self.auth_code.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_auth_code(&mut self) {
        self.auth_code.clear();
    }

    pub fn has_auth_code(&self) -> bool {
        self.auth_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_code(&mut self, v: ::std::string::String) {
        self.auth_code = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_code(&mut self) -> &mut ::std::string::String {
        if self.auth_code.is_none() {
            self.auth_code.set_default();
        }
        self.auth_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_code(&mut self) -> ::std::string::String {
        self.auth_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 otp_type = 85;

    pub fn get_otp_type(&self) -> i32 {
        self.otp_type.unwrap_or(0)
    }
    pub fn clear_otp_type(&mut self) {
        self.otp_type = ::std::option::Option::None;
    }

    pub fn has_otp_type(&self) -> bool {
        self.otp_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_otp_type(&mut self, v: i32) {
        self.otp_type = ::std::option::Option::Some(v);
    }

    // optional uint32 otp_value = 86;

    pub fn get_otp_value(&self) -> u32 {
        self.otp_value.unwrap_or(0)
    }
    pub fn clear_otp_value(&mut self) {
        self.otp_value = ::std::option::Option::None;
    }

    pub fn has_otp_value(&self) -> bool {
        self.otp_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_otp_value(&mut self, v: u32) {
        self.otp_value = ::std::option::Option::Some(v);
    }

    // optional string otp_identifier = 87;

    pub fn get_otp_identifier(&self) -> &str {
        match self.otp_identifier.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_otp_identifier(&mut self) {
        self.otp_identifier.clear();
    }

    pub fn has_otp_identifier(&self) -> bool {
        self.otp_identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_otp_identifier(&mut self, v: ::std::string::String) {
        self.otp_identifier = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_otp_identifier(&mut self) -> &mut ::std::string::String {
        if self.otp_identifier.is_none() {
            self.otp_identifier.set_default();
        }
        self.otp_identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_otp_identifier(&mut self) -> ::std::string::String {
        self.otp_identifier
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool steam2_ticket_request = 88;

    pub fn get_steam2_ticket_request(&self) -> bool {
        self.steam2_ticket_request.unwrap_or(false)
    }
    pub fn clear_steam2_ticket_request(&mut self) {
        self.steam2_ticket_request = ::std::option::Option::None;
    }

    pub fn has_steam2_ticket_request(&self) -> bool {
        self.steam2_ticket_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam2_ticket_request(&mut self, v: bool) {
        self.steam2_ticket_request = ::std::option::Option::Some(v);
    }

    // optional bytes sony_psn_ticket = 90;

    pub fn get_sony_psn_ticket(&self) -> &[u8] {
        match self.sony_psn_ticket.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_sony_psn_ticket(&mut self) {
        self.sony_psn_ticket.clear();
    }

    pub fn has_sony_psn_ticket(&self) -> bool {
        self.sony_psn_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sony_psn_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.sony_psn_ticket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sony_psn_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sony_psn_ticket.is_none() {
            self.sony_psn_ticket.set_default();
        }
        self.sony_psn_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_sony_psn_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.sony_psn_ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string sony_psn_service_id = 91;

    pub fn get_sony_psn_service_id(&self) -> &str {
        match self.sony_psn_service_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_sony_psn_service_id(&mut self) {
        self.sony_psn_service_id.clear();
    }

    pub fn has_sony_psn_service_id(&self) -> bool {
        self.sony_psn_service_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sony_psn_service_id(&mut self, v: ::std::string::String) {
        self.sony_psn_service_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sony_psn_service_id(&mut self) -> &mut ::std::string::String {
        if self.sony_psn_service_id.is_none() {
            self.sony_psn_service_id.set_default();
        }
        self.sony_psn_service_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_sony_psn_service_id(&mut self) -> ::std::string::String {
        self.sony_psn_service_id
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool create_new_psn_linked_account_if_needed = 92;

    pub fn get_create_new_psn_linked_account_if_needed(&self) -> bool {
        self.create_new_psn_linked_account_if_needed.unwrap_or(false)
    }
    pub fn clear_create_new_psn_linked_account_if_needed(&mut self) {
        self.create_new_psn_linked_account_if_needed = ::std::option::Option::None;
    }

    pub fn has_create_new_psn_linked_account_if_needed(&self) -> bool {
        self.create_new_psn_linked_account_if_needed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_new_psn_linked_account_if_needed(&mut self, v: bool) {
        self.create_new_psn_linked_account_if_needed = ::std::option::Option::Some(v);
    }

    // optional string sony_psn_name = 93;

    pub fn get_sony_psn_name(&self) -> &str {
        match self.sony_psn_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_sony_psn_name(&mut self) {
        self.sony_psn_name.clear();
    }

    pub fn has_sony_psn_name(&self) -> bool {
        self.sony_psn_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sony_psn_name(&mut self, v: ::std::string::String) {
        self.sony_psn_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sony_psn_name(&mut self) -> &mut ::std::string::String {
        if self.sony_psn_name.is_none() {
            self.sony_psn_name.set_default();
        }
        self.sony_psn_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_sony_psn_name(&mut self) -> ::std::string::String {
        self.sony_psn_name
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 game_server_app_id = 94;

    pub fn get_game_server_app_id(&self) -> i32 {
        self.game_server_app_id.unwrap_or(0)
    }
    pub fn clear_game_server_app_id(&mut self) {
        self.game_server_app_id = ::std::option::Option::None;
    }

    pub fn has_game_server_app_id(&self) -> bool {
        self.game_server_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_app_id(&mut self, v: i32) {
        self.game_server_app_id = ::std::option::Option::Some(v);
    }

    // optional bool steamguard_dont_remember_computer = 95;

    pub fn get_steamguard_dont_remember_computer(&self) -> bool {
        self.steamguard_dont_remember_computer.unwrap_or(false)
    }
    pub fn clear_steamguard_dont_remember_computer(&mut self) {
        self.steamguard_dont_remember_computer = ::std::option::Option::None;
    }

    pub fn has_steamguard_dont_remember_computer(&self) -> bool {
        self.steamguard_dont_remember_computer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamguard_dont_remember_computer(&mut self, v: bool) {
        self.steamguard_dont_remember_computer = ::std::option::Option::Some(v);
    }

    // optional string machine_name = 96;

    pub fn get_machine_name(&self) -> &str {
        match self.machine_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_machine_name(&mut self) {
        self.machine_name.clear();
    }

    pub fn has_machine_name(&self) -> bool {
        self.machine_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine_name(&mut self, v: ::std::string::String) {
        self.machine_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine_name(&mut self) -> &mut ::std::string::String {
        if self.machine_name.is_none() {
            self.machine_name.set_default();
        }
        self.machine_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine_name(&mut self) -> ::std::string::String {
        self.machine_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string machine_name_userchosen = 97;

    pub fn get_machine_name_userchosen(&self) -> &str {
        match self.machine_name_userchosen.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_machine_name_userchosen(&mut self) {
        self.machine_name_userchosen.clear();
    }

    pub fn has_machine_name_userchosen(&self) -> bool {
        self.machine_name_userchosen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine_name_userchosen(&mut self, v: ::std::string::String) {
        self.machine_name_userchosen = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine_name_userchosen(&mut self) -> &mut ::std::string::String {
        if self.machine_name_userchosen.is_none() {
            self.machine_name_userchosen.set_default();
        }
        self.machine_name_userchosen.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine_name_userchosen(&mut self) -> ::std::string::String {
        self.machine_name_userchosen
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string country_override = 98;

    pub fn get_country_override(&self) -> &str {
        match self.country_override.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_country_override(&mut self) {
        self.country_override.clear();
    }

    pub fn has_country_override(&self) -> bool {
        self.country_override.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_override(&mut self, v: ::std::string::String) {
        self.country_override = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_override(&mut self) -> &mut ::std::string::String {
        if self.country_override.is_none() {
            self.country_override.set_default();
        }
        self.country_override.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_override(&mut self) -> ::std::string::String {
        self.country_override
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_steam_box = 99;

    pub fn get_is_steam_box(&self) -> bool {
        self.is_steam_box.unwrap_or(false)
    }
    pub fn clear_is_steam_box(&mut self) {
        self.is_steam_box = ::std::option::Option::None;
    }

    pub fn has_is_steam_box(&self) -> bool {
        self.is_steam_box.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steam_box(&mut self, v: bool) {
        self.is_steam_box = ::std::option::Option::Some(v);
    }

    // optional uint64 client_instance_id = 100;

    pub fn get_client_instance_id(&self) -> u64 {
        self.client_instance_id.unwrap_or(0)
    }
    pub fn clear_client_instance_id(&mut self) {
        self.client_instance_id = ::std::option::Option::None;
    }

    pub fn has_client_instance_id(&self) -> bool {
        self.client_instance_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_instance_id(&mut self, v: u64) {
        self.client_instance_id = ::std::option::Option::Some(v);
    }

    // optional string two_factor_code = 101;

    pub fn get_two_factor_code(&self) -> &str {
        match self.two_factor_code.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_two_factor_code(&mut self) {
        self.two_factor_code.clear();
    }

    pub fn has_two_factor_code(&self) -> bool {
        self.two_factor_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two_factor_code(&mut self, v: ::std::string::String) {
        self.two_factor_code = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_two_factor_code(&mut self) -> &mut ::std::string::String {
        if self.two_factor_code.is_none() {
            self.two_factor_code.set_default();
        }
        self.two_factor_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_two_factor_code(&mut self) -> ::std::string::String {
        self.two_factor_code
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool supports_rate_limit_response = 102;

    pub fn get_supports_rate_limit_response(&self) -> bool {
        self.supports_rate_limit_response.unwrap_or(false)
    }
    pub fn clear_supports_rate_limit_response(&mut self) {
        self.supports_rate_limit_response = ::std::option::Option::None;
    }

    pub fn has_supports_rate_limit_response(&self) -> bool {
        self.supports_rate_limit_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_supports_rate_limit_response(&mut self, v: bool) {
        self.supports_rate_limit_response = ::std::option::Option::Some(v);
    }

    // optional string web_logon_nonce = 103;

    pub fn get_web_logon_nonce(&self) -> &str {
        match self.web_logon_nonce.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_web_logon_nonce(&mut self) {
        self.web_logon_nonce.clear();
    }

    pub fn has_web_logon_nonce(&self) -> bool {
        self.web_logon_nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_web_logon_nonce(&mut self, v: ::std::string::String) {
        self.web_logon_nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_web_logon_nonce(&mut self) -> &mut ::std::string::String {
        if self.web_logon_nonce.is_none() {
            self.web_logon_nonce.set_default();
        }
        self.web_logon_nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_web_logon_nonce(&mut self) -> ::std::string::String {
        self.web_logon_nonce
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 priority_reason = 104;

    pub fn get_priority_reason(&self) -> i32 {
        self.priority_reason.unwrap_or(0)
    }
    pub fn clear_priority_reason(&mut self) {
        self.priority_reason = ::std::option::Option::None;
    }

    pub fn has_priority_reason(&self) -> bool {
        self.priority_reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority_reason(&mut self, v: i32) {
        self.priority_reason = ::std::option::Option::Some(v);
    }

    // optional .CMsgClientSecret embedded_client_secret = 105;

    pub fn get_embedded_client_secret(&self) -> &CMsgClientSecret {
        self.embedded_client_secret
            .as_ref()
            .unwrap_or_else(|| <CMsgClientSecret as ::protobuf::Message>::default_instance())
    }
    pub fn clear_embedded_client_secret(&mut self) {
        self.embedded_client_secret.clear();
    }

    pub fn has_embedded_client_secret(&self) -> bool {
        self.embedded_client_secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_embedded_client_secret(&mut self, v: CMsgClientSecret) {
        self.embedded_client_secret = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_embedded_client_secret(&mut self) -> &mut CMsgClientSecret {
        if self.embedded_client_secret.is_none() {
            self.embedded_client_secret.set_default();
        }
        self.embedded_client_secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_embedded_client_secret(&mut self) -> CMsgClientSecret {
        self.embedded_client_secret
            .take()
            .unwrap_or_else(|| CMsgClientSecret::new())
    }

    // optional bool disable_partner_autogrants = 106;

    pub fn get_disable_partner_autogrants(&self) -> bool {
        self.disable_partner_autogrants.unwrap_or(false)
    }
    pub fn clear_disable_partner_autogrants(&mut self) {
        self.disable_partner_autogrants = ::std::option::Option::None;
    }

    pub fn has_disable_partner_autogrants(&self) -> bool {
        self.disable_partner_autogrants.is_some()
    }

    // Param is passed by value, moved
    pub fn set_disable_partner_autogrants(&mut self, v: bool) {
        self.disable_partner_autogrants = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientLogon {
    fn is_initialized(&self) -> bool {
        for v in &self.obfuscated_private_ip {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.public_ip {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.embedded_client_secret {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.protocol_version = ::std::option::Option::Some(tmp);
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.deprecated_obfustucated_private_ip = ::std::option::Option::Some(tmp);
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cell_id = ::std::option::Option::Some(tmp);
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_session_id = ::std::option::Option::Some(tmp);
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.client_package_version = ::std::option::Option::Some(tmp);
                }
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_language)?;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.client_os_type = ::std::option::Option::Some(tmp);
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.should_remember_password = ::std::option::Option::Some(tmp);
                }
                9 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.wine_version)?;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.deprecated_10 = ::std::option::Option::Some(tmp);
                }
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.obfuscated_private_ip)?;
                }
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.deprecated_public_ip = ::std::option::Option::Some(tmp);
                }
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.qos_level = ::std::option::Option::Some(tmp);
                }
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.client_supplied_steam_id = ::std::option::Option::Some(tmp);
                }
                23 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_ip)?;
                }
                30 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.machine_id)?;
                }
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.launcher_type = ::std::option::Option::Some(tmp);
                }
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ui_mode = ::std::option::Option::Some(tmp);
                }
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chat_mode = ::std::option::Option::Some(tmp);
                }
                41 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.steam2_auth_ticket)?;
                }
                42 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.email_address)?;
                }
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.rtime32_account_creation = ::std::option::Option::Some(tmp);
                }
                50 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_name)?;
                }
                51 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.password)?;
                }
                52 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.game_server_token)?;
                }
                60 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.login_key)?;
                }
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.was_converted_deprecated_msg = ::std::option::Option::Some(tmp);
                }
                80 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.anon_user_target_account_name)?;
                }
                81 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.resolved_user_steam_id = ::std::option::Option::Some(tmp);
                }
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.eresult_sentryfile = ::std::option::Option::Some(tmp);
                }
                83 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sha_sentryfile)?;
                }
                84 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.auth_code)?;
                }
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.otp_type = ::std::option::Option::Some(tmp);
                }
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.otp_value = ::std::option::Option::Some(tmp);
                }
                87 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.otp_identifier)?;
                }
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.steam2_ticket_request = ::std::option::Option::Some(tmp);
                }
                90 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sony_psn_ticket)?;
                }
                91 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sony_psn_service_id)?;
                }
                92 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.create_new_psn_linked_account_if_needed = ::std::option::Option::Some(tmp);
                }
                93 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sony_psn_name)?;
                }
                94 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.game_server_app_id = ::std::option::Option::Some(tmp);
                }
                95 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.steamguard_dont_remember_computer = ::std::option::Option::Some(tmp);
                }
                96 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.machine_name)?;
                }
                97 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.machine_name_userchosen)?;
                }
                98 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.country_override)?;
                }
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_steam_box = ::std::option::Option::Some(tmp);
                }
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_instance_id = ::std::option::Option::Some(tmp);
                }
                101 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.two_factor_code)?;
                }
                102 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.supports_rate_limit_response = ::std::option::Option::Some(tmp);
                }
                103 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.web_logon_nonce)?;
                }
                104 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.priority_reason = ::std::option::Option::Some(tmp);
                }
                105 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.embedded_client_secret)?;
                }
                106 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_partner_autogrants = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.deprecated_obfustucated_private_ip {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cell_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.last_session_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.client_language.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.client_os_type {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.should_remember_password {
            my_size += 2;
        }
        if let Some(ref v) = self.wine_version.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.deprecated_10 {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.obfuscated_private_ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.deprecated_public_ip {
            my_size += ::protobuf::rt::value_size(20, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.qos_level {
            my_size += ::protobuf::rt::value_size(21, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_supplied_steam_id {
            my_size += 10;
        }
        if let Some(ref v) = self.public_ip.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.machine_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(30, &v);
        }
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::value_size(31, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ui_mode {
            my_size += ::protobuf::rt::value_size(32, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.chat_mode {
            my_size += ::protobuf::rt::value_size(33, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.steam2_auth_ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(41, &v);
        }
        if let Some(ref v) = self.email_address.as_ref() {
            my_size += ::protobuf::rt::string_size(42, &v);
        }
        if let Some(v) = self.rtime32_account_creation {
            my_size += 6;
        }
        if let Some(ref v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(50, &v);
        }
        if let Some(ref v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(51, &v);
        }
        if let Some(ref v) = self.game_server_token.as_ref() {
            my_size += ::protobuf::rt::string_size(52, &v);
        }
        if let Some(ref v) = self.login_key.as_ref() {
            my_size += ::protobuf::rt::string_size(60, &v);
        }
        if let Some(v) = self.was_converted_deprecated_msg {
            my_size += 3;
        }
        if let Some(ref v) = self.anon_user_target_account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(80, &v);
        }
        if let Some(v) = self.resolved_user_steam_id {
            my_size += 10;
        }
        if let Some(v) = self.eresult_sentryfile {
            my_size += ::protobuf::rt::value_size(82, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sha_sentryfile.as_ref() {
            my_size += ::protobuf::rt::bytes_size(83, &v);
        }
        if let Some(ref v) = self.auth_code.as_ref() {
            my_size += ::protobuf::rt::string_size(84, &v);
        }
        if let Some(v) = self.otp_type {
            my_size += ::protobuf::rt::value_size(85, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.otp_value {
            my_size += ::protobuf::rt::value_size(86, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.otp_identifier.as_ref() {
            my_size += ::protobuf::rt::string_size(87, &v);
        }
        if let Some(v) = self.steam2_ticket_request {
            my_size += 3;
        }
        if let Some(ref v) = self.sony_psn_ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(90, &v);
        }
        if let Some(ref v) = self.sony_psn_service_id.as_ref() {
            my_size += ::protobuf::rt::string_size(91, &v);
        }
        if let Some(v) = self.create_new_psn_linked_account_if_needed {
            my_size += 3;
        }
        if let Some(ref v) = self.sony_psn_name.as_ref() {
            my_size += ::protobuf::rt::string_size(93, &v);
        }
        if let Some(v) = self.game_server_app_id {
            my_size += ::protobuf::rt::value_size(94, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamguard_dont_remember_computer {
            my_size += 3;
        }
        if let Some(ref v) = self.machine_name.as_ref() {
            my_size += ::protobuf::rt::string_size(96, &v);
        }
        if let Some(ref v) = self.machine_name_userchosen.as_ref() {
            my_size += ::protobuf::rt::string_size(97, &v);
        }
        if let Some(ref v) = self.country_override.as_ref() {
            my_size += ::protobuf::rt::string_size(98, &v);
        }
        if let Some(v) = self.is_steam_box {
            my_size += 3;
        }
        if let Some(v) = self.client_instance_id {
            my_size += ::protobuf::rt::value_size(100, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.two_factor_code.as_ref() {
            my_size += ::protobuf::rt::string_size(101, &v);
        }
        if let Some(v) = self.supports_rate_limit_response {
            my_size += 3;
        }
        if let Some(ref v) = self.web_logon_nonce.as_ref() {
            my_size += ::protobuf::rt::string_size(103, &v);
        }
        if let Some(v) = self.priority_reason {
            my_size += ::protobuf::rt::value_size(104, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.embedded_client_secret.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.disable_partner_autogrants {
            my_size += 3;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.protocol_version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.deprecated_obfustucated_private_ip {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.cell_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.last_session_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(5, v)?;
        }
        if let Some(ref v) = self.client_language.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.client_os_type {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.should_remember_password {
            os.write_bool(8, v)?;
        }
        if let Some(ref v) = self.wine_version.as_ref() {
            os.write_string(9, &v)?;
        }
        if let Some(v) = self.deprecated_10 {
            os.write_uint32(10, v)?;
        }
        if let Some(ref v) = self.obfuscated_private_ip.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.deprecated_public_ip {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.qos_level {
            os.write_uint32(21, v)?;
        }
        if let Some(v) = self.client_supplied_steam_id {
            os.write_fixed64(22, v)?;
        }
        if let Some(ref v) = self.public_ip.as_ref() {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.machine_id.as_ref() {
            os.write_bytes(30, &v)?;
        }
        if let Some(v) = self.launcher_type {
            os.write_uint32(31, v)?;
        }
        if let Some(v) = self.ui_mode {
            os.write_uint32(32, v)?;
        }
        if let Some(v) = self.chat_mode {
            os.write_uint32(33, v)?;
        }
        if let Some(ref v) = self.steam2_auth_ticket.as_ref() {
            os.write_bytes(41, &v)?;
        }
        if let Some(ref v) = self.email_address.as_ref() {
            os.write_string(42, &v)?;
        }
        if let Some(v) = self.rtime32_account_creation {
            os.write_fixed32(43, v)?;
        }
        if let Some(ref v) = self.account_name.as_ref() {
            os.write_string(50, &v)?;
        }
        if let Some(ref v) = self.password.as_ref() {
            os.write_string(51, &v)?;
        }
        if let Some(ref v) = self.game_server_token.as_ref() {
            os.write_string(52, &v)?;
        }
        if let Some(ref v) = self.login_key.as_ref() {
            os.write_string(60, &v)?;
        }
        if let Some(v) = self.was_converted_deprecated_msg {
            os.write_bool(70, v)?;
        }
        if let Some(ref v) = self.anon_user_target_account_name.as_ref() {
            os.write_string(80, &v)?;
        }
        if let Some(v) = self.resolved_user_steam_id {
            os.write_fixed64(81, v)?;
        }
        if let Some(v) = self.eresult_sentryfile {
            os.write_int32(82, v)?;
        }
        if let Some(ref v) = self.sha_sentryfile.as_ref() {
            os.write_bytes(83, &v)?;
        }
        if let Some(ref v) = self.auth_code.as_ref() {
            os.write_string(84, &v)?;
        }
        if let Some(v) = self.otp_type {
            os.write_int32(85, v)?;
        }
        if let Some(v) = self.otp_value {
            os.write_uint32(86, v)?;
        }
        if let Some(ref v) = self.otp_identifier.as_ref() {
            os.write_string(87, &v)?;
        }
        if let Some(v) = self.steam2_ticket_request {
            os.write_bool(88, v)?;
        }
        if let Some(ref v) = self.sony_psn_ticket.as_ref() {
            os.write_bytes(90, &v)?;
        }
        if let Some(ref v) = self.sony_psn_service_id.as_ref() {
            os.write_string(91, &v)?;
        }
        if let Some(v) = self.create_new_psn_linked_account_if_needed {
            os.write_bool(92, v)?;
        }
        if let Some(ref v) = self.sony_psn_name.as_ref() {
            os.write_string(93, &v)?;
        }
        if let Some(v) = self.game_server_app_id {
            os.write_int32(94, v)?;
        }
        if let Some(v) = self.steamguard_dont_remember_computer {
            os.write_bool(95, v)?;
        }
        if let Some(ref v) = self.machine_name.as_ref() {
            os.write_string(96, &v)?;
        }
        if let Some(ref v) = self.machine_name_userchosen.as_ref() {
            os.write_string(97, &v)?;
        }
        if let Some(ref v) = self.country_override.as_ref() {
            os.write_string(98, &v)?;
        }
        if let Some(v) = self.is_steam_box {
            os.write_bool(99, v)?;
        }
        if let Some(v) = self.client_instance_id {
            os.write_uint64(100, v)?;
        }
        if let Some(ref v) = self.two_factor_code.as_ref() {
            os.write_string(101, &v)?;
        }
        if let Some(v) = self.supports_rate_limit_response {
            os.write_bool(102, v)?;
        }
        if let Some(ref v) = self.web_logon_nonce.as_ref() {
            os.write_string(103, &v)?;
        }
        if let Some(v) = self.priority_reason {
            os.write_int32(104, v)?;
        }
        if let Some(ref v) = self.embedded_client_secret.as_ref() {
            os.write_tag(105, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.disable_partner_autogrants {
            os.write_bool(106, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientLogon {
        CMsgClientLogon::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "protocol_version",
                |m: &CMsgClientLogon| &m.protocol_version,
                |m: &mut CMsgClientLogon| &mut m.protocol_version,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "deprecated_obfustucated_private_ip",
                |m: &CMsgClientLogon| &m.deprecated_obfustucated_private_ip,
                |m: &mut CMsgClientLogon| &mut m.deprecated_obfustucated_private_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "cell_id",
                |m: &CMsgClientLogon| &m.cell_id,
                |m: &mut CMsgClientLogon| &mut m.cell_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "last_session_id",
                |m: &CMsgClientLogon| &m.last_session_id,
                |m: &mut CMsgClientLogon| &mut m.last_session_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "client_package_version",
                |m: &CMsgClientLogon| &m.client_package_version,
                |m: &mut CMsgClientLogon| &mut m.client_package_version,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "client_language",
                |m: &CMsgClientLogon| &m.client_language,
                |m: &mut CMsgClientLogon| &mut m.client_language,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "client_os_type",
                |m: &CMsgClientLogon| &m.client_os_type,
                |m: &mut CMsgClientLogon| &mut m.client_os_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "should_remember_password",
                |m: &CMsgClientLogon| &m.should_remember_password,
                |m: &mut CMsgClientLogon| &mut m.should_remember_password,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "wine_version",
                |m: &CMsgClientLogon| &m.wine_version,
                |m: &mut CMsgClientLogon| &mut m.wine_version,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "deprecated_10",
                |m: &CMsgClientLogon| &m.deprecated_10,
                |m: &mut CMsgClientLogon| &mut m.deprecated_10,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<super::steammessages_base::CMsgIPAddress>,
            >(
                "obfuscated_private_ip",
                |m: &CMsgClientLogon| &m.obfuscated_private_ip,
                |m: &mut CMsgClientLogon| &mut m.obfuscated_private_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "deprecated_public_ip",
                |m: &CMsgClientLogon| &m.deprecated_public_ip,
                |m: &mut CMsgClientLogon| &mut m.deprecated_public_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "qos_level",
                |m: &CMsgClientLogon| &m.qos_level,
                |m: &mut CMsgClientLogon| &mut m.qos_level,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed64,
            >(
                "client_supplied_steam_id",
                |m: &CMsgClientLogon| &m.client_supplied_steam_id,
                |m: &mut CMsgClientLogon| &mut m.client_supplied_steam_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<super::steammessages_base::CMsgIPAddress>,
            >(
                "public_ip",
                |m: &CMsgClientLogon| &m.public_ip,
                |m: &mut CMsgClientLogon| &mut m.public_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "machine_id",
                |m: &CMsgClientLogon| &m.machine_id,
                |m: &mut CMsgClientLogon| &mut m.machine_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "launcher_type",
                |m: &CMsgClientLogon| &m.launcher_type,
                |m: &mut CMsgClientLogon| &mut m.launcher_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "ui_mode",
                |m: &CMsgClientLogon| &m.ui_mode,
                |m: &mut CMsgClientLogon| &mut m.ui_mode,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "chat_mode",
                |m: &CMsgClientLogon| &m.chat_mode,
                |m: &mut CMsgClientLogon| &mut m.chat_mode,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "steam2_auth_ticket",
                |m: &CMsgClientLogon| &m.steam2_auth_ticket,
                |m: &mut CMsgClientLogon| &mut m.steam2_auth_ticket,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "email_address",
                |m: &CMsgClientLogon| &m.email_address,
                |m: &mut CMsgClientLogon| &mut m.email_address,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed32,
            >(
                "rtime32_account_creation",
                |m: &CMsgClientLogon| &m.rtime32_account_creation,
                |m: &mut CMsgClientLogon| &mut m.rtime32_account_creation,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "account_name",
                |m: &CMsgClientLogon| &m.account_name,
                |m: &mut CMsgClientLogon| &mut m.account_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "password",
                |m: &CMsgClientLogon| &m.password,
                |m: &mut CMsgClientLogon| &mut m.password,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "game_server_token",
                |m: &CMsgClientLogon| &m.game_server_token,
                |m: &mut CMsgClientLogon| &mut m.game_server_token,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "login_key",
                |m: &CMsgClientLogon| &m.login_key,
                |m: &mut CMsgClientLogon| &mut m.login_key,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "was_converted_deprecated_msg",
                |m: &CMsgClientLogon| &m.was_converted_deprecated_msg,
                |m: &mut CMsgClientLogon| &mut m.was_converted_deprecated_msg,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "anon_user_target_account_name",
                |m: &CMsgClientLogon| &m.anon_user_target_account_name,
                |m: &mut CMsgClientLogon| &mut m.anon_user_target_account_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed64,
            >(
                "resolved_user_steam_id",
                |m: &CMsgClientLogon| &m.resolved_user_steam_id,
                |m: &mut CMsgClientLogon| &mut m.resolved_user_steam_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "eresult_sentryfile",
                |m: &CMsgClientLogon| &m.eresult_sentryfile,
                |m: &mut CMsgClientLogon| &mut m.eresult_sentryfile,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "sha_sentryfile",
                |m: &CMsgClientLogon| &m.sha_sentryfile,
                |m: &mut CMsgClientLogon| &mut m.sha_sentryfile,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "auth_code",
                |m: &CMsgClientLogon| &m.auth_code,
                |m: &mut CMsgClientLogon| &mut m.auth_code,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "otp_type",
                |m: &CMsgClientLogon| &m.otp_type,
                |m: &mut CMsgClientLogon| &mut m.otp_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "otp_value",
                |m: &CMsgClientLogon| &m.otp_value,
                |m: &mut CMsgClientLogon| &mut m.otp_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "otp_identifier",
                |m: &CMsgClientLogon| &m.otp_identifier,
                |m: &mut CMsgClientLogon| &mut m.otp_identifier,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "steam2_ticket_request",
                |m: &CMsgClientLogon| &m.steam2_ticket_request,
                |m: &mut CMsgClientLogon| &mut m.steam2_ticket_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "sony_psn_ticket",
                |m: &CMsgClientLogon| &m.sony_psn_ticket,
                |m: &mut CMsgClientLogon| &mut m.sony_psn_ticket,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "sony_psn_service_id",
                |m: &CMsgClientLogon| &m.sony_psn_service_id,
                |m: &mut CMsgClientLogon| &mut m.sony_psn_service_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "create_new_psn_linked_account_if_needed",
                |m: &CMsgClientLogon| &m.create_new_psn_linked_account_if_needed,
                |m: &mut CMsgClientLogon| &mut m.create_new_psn_linked_account_if_needed,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "sony_psn_name",
                |m: &CMsgClientLogon| &m.sony_psn_name,
                |m: &mut CMsgClientLogon| &mut m.sony_psn_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "game_server_app_id",
                |m: &CMsgClientLogon| &m.game_server_app_id,
                |m: &mut CMsgClientLogon| &mut m.game_server_app_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "steamguard_dont_remember_computer",
                |m: &CMsgClientLogon| &m.steamguard_dont_remember_computer,
                |m: &mut CMsgClientLogon| &mut m.steamguard_dont_remember_computer,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "machine_name",
                |m: &CMsgClientLogon| &m.machine_name,
                |m: &mut CMsgClientLogon| &mut m.machine_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "machine_name_userchosen",
                |m: &CMsgClientLogon| &m.machine_name_userchosen,
                |m: &mut CMsgClientLogon| &mut m.machine_name_userchosen,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "country_override",
                |m: &CMsgClientLogon| &m.country_override,
                |m: &mut CMsgClientLogon| &mut m.country_override,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "is_steam_box",
                |m: &CMsgClientLogon| &m.is_steam_box,
                |m: &mut CMsgClientLogon| &mut m.is_steam_box,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "client_instance_id",
                |m: &CMsgClientLogon| &m.client_instance_id,
                |m: &mut CMsgClientLogon| &mut m.client_instance_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "two_factor_code",
                |m: &CMsgClientLogon| &m.two_factor_code,
                |m: &mut CMsgClientLogon| &mut m.two_factor_code,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "supports_rate_limit_response",
                |m: &CMsgClientLogon| &m.supports_rate_limit_response,
                |m: &mut CMsgClientLogon| &mut m.supports_rate_limit_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "web_logon_nonce",
                |m: &CMsgClientLogon| &m.web_logon_nonce,
                |m: &mut CMsgClientLogon| &mut m.web_logon_nonce,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "priority_reason",
                |m: &CMsgClientLogon| &m.priority_reason,
                |m: &mut CMsgClientLogon| &mut m.priority_reason,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<CMsgClientSecret>,
            >(
                "embedded_client_secret",
                |m: &CMsgClientLogon| &m.embedded_client_secret,
                |m: &mut CMsgClientLogon| &mut m.embedded_client_secret,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "disable_partner_autogrants",
                |m: &CMsgClientLogon| &m.disable_partner_autogrants,
                |m: &mut CMsgClientLogon| &mut m.disable_partner_autogrants,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientLogon>(
                "CMsgClientLogon",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientLogon {
        static instance: ::protobuf::rt::LazyV2<CMsgClientLogon> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientLogon::new)
    }
}

impl ::protobuf::Clear for CMsgClientLogon {
    fn clear(&mut self) {
        self.protocol_version = ::std::option::Option::None;
        self.deprecated_obfustucated_private_ip = ::std::option::Option::None;
        self.cell_id = ::std::option::Option::None;
        self.last_session_id = ::std::option::Option::None;
        self.client_package_version = ::std::option::Option::None;
        self.client_language.clear();
        self.client_os_type = ::std::option::Option::None;
        self.should_remember_password = ::std::option::Option::None;
        self.wine_version.clear();
        self.deprecated_10 = ::std::option::Option::None;
        self.obfuscated_private_ip.clear();
        self.deprecated_public_ip = ::std::option::Option::None;
        self.qos_level = ::std::option::Option::None;
        self.client_supplied_steam_id = ::std::option::Option::None;
        self.public_ip.clear();
        self.machine_id.clear();
        self.launcher_type = ::std::option::Option::None;
        self.ui_mode = ::std::option::Option::None;
        self.chat_mode = ::std::option::Option::None;
        self.steam2_auth_ticket.clear();
        self.email_address.clear();
        self.rtime32_account_creation = ::std::option::Option::None;
        self.account_name.clear();
        self.password.clear();
        self.game_server_token.clear();
        self.login_key.clear();
        self.was_converted_deprecated_msg = ::std::option::Option::None;
        self.anon_user_target_account_name.clear();
        self.resolved_user_steam_id = ::std::option::Option::None;
        self.eresult_sentryfile = ::std::option::Option::None;
        self.sha_sentryfile.clear();
        self.auth_code.clear();
        self.otp_type = ::std::option::Option::None;
        self.otp_value = ::std::option::Option::None;
        self.otp_identifier.clear();
        self.steam2_ticket_request = ::std::option::Option::None;
        self.sony_psn_ticket.clear();
        self.sony_psn_service_id.clear();
        self.create_new_psn_linked_account_if_needed = ::std::option::Option::None;
        self.sony_psn_name.clear();
        self.game_server_app_id = ::std::option::Option::None;
        self.steamguard_dont_remember_computer = ::std::option::Option::None;
        self.machine_name.clear();
        self.machine_name_userchosen.clear();
        self.country_override.clear();
        self.is_steam_box = ::std::option::Option::None;
        self.client_instance_id = ::std::option::Option::None;
        self.two_factor_code.clear();
        self.supports_rate_limit_response = ::std::option::Option::None;
        self.web_logon_nonce.clear();
        self.priority_reason = ::std::option::Option::None;
        self.embedded_client_secret.clear();
        self.disable_partner_autogrants = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientLogon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLogon {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientLogonResponse {
    // message fields
    eresult: ::std::option::Option<i32>,
    out_of_game_heartbeat_seconds: ::std::option::Option<i32>,
    in_game_heartbeat_seconds: ::std::option::Option<i32>,
    deprecated_public_ip: ::std::option::Option<u32>,
    rtime32_server_time: ::std::option::Option<u32>,
    account_flags: ::std::option::Option<u32>,
    cell_id: ::std::option::Option<u32>,
    email_domain: ::protobuf::SingularField<::std::string::String>,
    steam2_ticket: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    eresult_extended: ::std::option::Option<i32>,
    webapi_authenticate_user_nonce: ::protobuf::SingularField<::std::string::String>,
    cell_id_ping_threshold: ::std::option::Option<u32>,
    deprecated_use_pics: ::std::option::Option<bool>,
    vanity_url: ::protobuf::SingularField<::std::string::String>,
    pub public_ip: ::protobuf::SingularPtrField<super::steammessages_base::CMsgIPAddress>,
    client_supplied_steamid: ::std::option::Option<u64>,
    ip_country_code: ::protobuf::SingularField<::std::string::String>,
    parental_settings: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    parental_setting_signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    count_loginfailures_to_migrate: ::std::option::Option<i32>,
    count_disconnects_to_migrate: ::std::option::Option<i32>,
    ogs_data_report_time_window: ::std::option::Option<i32>,
    client_instance_id: ::std::option::Option<u64>,
    force_client_update_check: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientLogonResponse {
    fn default() -> &'a CMsgClientLogonResponse {
        <CMsgClientLogonResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLogonResponse {
    pub fn new() -> CMsgClientLogonResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn get_eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }
    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional int32 out_of_game_heartbeat_seconds = 2;

    pub fn get_out_of_game_heartbeat_seconds(&self) -> i32 {
        self.out_of_game_heartbeat_seconds.unwrap_or(0)
    }
    pub fn clear_out_of_game_heartbeat_seconds(&mut self) {
        self.out_of_game_heartbeat_seconds = ::std::option::Option::None;
    }

    pub fn has_out_of_game_heartbeat_seconds(&self) -> bool {
        self.out_of_game_heartbeat_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_out_of_game_heartbeat_seconds(&mut self, v: i32) {
        self.out_of_game_heartbeat_seconds = ::std::option::Option::Some(v);
    }

    // optional int32 in_game_heartbeat_seconds = 3;

    pub fn get_in_game_heartbeat_seconds(&self) -> i32 {
        self.in_game_heartbeat_seconds.unwrap_or(0)
    }
    pub fn clear_in_game_heartbeat_seconds(&mut self) {
        self.in_game_heartbeat_seconds = ::std::option::Option::None;
    }

    pub fn has_in_game_heartbeat_seconds(&self) -> bool {
        self.in_game_heartbeat_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_in_game_heartbeat_seconds(&mut self, v: i32) {
        self.in_game_heartbeat_seconds = ::std::option::Option::Some(v);
    }

    // optional uint32 deprecated_public_ip = 4;

    pub fn get_deprecated_public_ip(&self) -> u32 {
        self.deprecated_public_ip.unwrap_or(0)
    }
    pub fn clear_deprecated_public_ip(&mut self) {
        self.deprecated_public_ip = ::std::option::Option::None;
    }

    pub fn has_deprecated_public_ip(&self) -> bool {
        self.deprecated_public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_public_ip(&mut self, v: u32) {
        self.deprecated_public_ip = ::std::option::Option::Some(v);
    }

    // optional fixed32 rtime32_server_time = 5;

    pub fn get_rtime32_server_time(&self) -> u32 {
        self.rtime32_server_time.unwrap_or(0)
    }
    pub fn clear_rtime32_server_time(&mut self) {
        self.rtime32_server_time = ::std::option::Option::None;
    }

    pub fn has_rtime32_server_time(&self) -> bool {
        self.rtime32_server_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime32_server_time(&mut self, v: u32) {
        self.rtime32_server_time = ::std::option::Option::Some(v);
    }

    // optional uint32 account_flags = 6;

    pub fn get_account_flags(&self) -> u32 {
        self.account_flags.unwrap_or(0)
    }
    pub fn clear_account_flags(&mut self) {
        self.account_flags = ::std::option::Option::None;
    }

    pub fn has_account_flags(&self) -> bool {
        self.account_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_flags(&mut self, v: u32) {
        self.account_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 cell_id = 7;

    pub fn get_cell_id(&self) -> u32 {
        self.cell_id.unwrap_or(0)
    }
    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: u32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional string email_domain = 8;

    pub fn get_email_domain(&self) -> &str {
        match self.email_domain.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_email_domain(&mut self) {
        self.email_domain.clear();
    }

    pub fn has_email_domain(&self) -> bool {
        self.email_domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_domain(&mut self, v: ::std::string::String) {
        self.email_domain = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email_domain(&mut self) -> &mut ::std::string::String {
        if self.email_domain.is_none() {
            self.email_domain.set_default();
        }
        self.email_domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_email_domain(&mut self) -> ::std::string::String {
        self.email_domain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes steam2_ticket = 9;

    pub fn get_steam2_ticket(&self) -> &[u8] {
        match self.steam2_ticket.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_steam2_ticket(&mut self) {
        self.steam2_ticket.clear();
    }

    pub fn has_steam2_ticket(&self) -> bool {
        self.steam2_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam2_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.steam2_ticket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steam2_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.steam2_ticket.is_none() {
            self.steam2_ticket.set_default();
        }
        self.steam2_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_steam2_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.steam2_ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional int32 eresult_extended = 10;

    pub fn get_eresult_extended(&self) -> i32 {
        self.eresult_extended.unwrap_or(0)
    }
    pub fn clear_eresult_extended(&mut self) {
        self.eresult_extended = ::std::option::Option::None;
    }

    pub fn has_eresult_extended(&self) -> bool {
        self.eresult_extended.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult_extended(&mut self, v: i32) {
        self.eresult_extended = ::std::option::Option::Some(v);
    }

    // optional string webapi_authenticate_user_nonce = 11;

    pub fn get_webapi_authenticate_user_nonce(&self) -> &str {
        match self.webapi_authenticate_user_nonce.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_webapi_authenticate_user_nonce(&mut self) {
        self.webapi_authenticate_user_nonce.clear();
    }

    pub fn has_webapi_authenticate_user_nonce(&self) -> bool {
        self.webapi_authenticate_user_nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webapi_authenticate_user_nonce(&mut self, v: ::std::string::String) {
        self.webapi_authenticate_user_nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webapi_authenticate_user_nonce(&mut self) -> &mut ::std::string::String {
        if self.webapi_authenticate_user_nonce.is_none() {
            self.webapi_authenticate_user_nonce.set_default();
        }
        self.webapi_authenticate_user_nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_webapi_authenticate_user_nonce(&mut self) -> ::std::string::String {
        self.webapi_authenticate_user_nonce
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 cell_id_ping_threshold = 12;

    pub fn get_cell_id_ping_threshold(&self) -> u32 {
        self.cell_id_ping_threshold.unwrap_or(0)
    }
    pub fn clear_cell_id_ping_threshold(&mut self) {
        self.cell_id_ping_threshold = ::std::option::Option::None;
    }

    pub fn has_cell_id_ping_threshold(&self) -> bool {
        self.cell_id_ping_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id_ping_threshold(&mut self, v: u32) {
        self.cell_id_ping_threshold = ::std::option::Option::Some(v);
    }

    // optional bool deprecated_use_pics = 13;

    pub fn get_deprecated_use_pics(&self) -> bool {
        self.deprecated_use_pics.unwrap_or(false)
    }
    pub fn clear_deprecated_use_pics(&mut self) {
        self.deprecated_use_pics = ::std::option::Option::None;
    }

    pub fn has_deprecated_use_pics(&self) -> bool {
        self.deprecated_use_pics.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_use_pics(&mut self, v: bool) {
        self.deprecated_use_pics = ::std::option::Option::Some(v);
    }

    // optional string vanity_url = 14;

    pub fn get_vanity_url(&self) -> &str {
        match self.vanity_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_vanity_url(&mut self) {
        self.vanity_url.clear();
    }

    pub fn has_vanity_url(&self) -> bool {
        self.vanity_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vanity_url(&mut self, v: ::std::string::String) {
        self.vanity_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vanity_url(&mut self) -> &mut ::std::string::String {
        if self.vanity_url.is_none() {
            self.vanity_url.set_default();
        }
        self.vanity_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_vanity_url(&mut self) -> ::std::string::String {
        self.vanity_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CMsgIPAddress public_ip = 15;

    pub fn get_public_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.public_ip
            .as_ref()
            .unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_public_ip(&mut self) {
        self.public_ip.clear();
    }

    pub fn has_public_ip(&self) -> bool {
        self.public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.public_ip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        if self.public_ip.is_none() {
            self.public_ip.set_default();
        }
        self.public_ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.public_ip
            .take()
            .unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional fixed64 client_supplied_steamid = 20;

    pub fn get_client_supplied_steamid(&self) -> u64 {
        self.client_supplied_steamid.unwrap_or(0)
    }
    pub fn clear_client_supplied_steamid(&mut self) {
        self.client_supplied_steamid = ::std::option::Option::None;
    }

    pub fn has_client_supplied_steamid(&self) -> bool {
        self.client_supplied_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_supplied_steamid(&mut self, v: u64) {
        self.client_supplied_steamid = ::std::option::Option::Some(v);
    }

    // optional string ip_country_code = 21;

    pub fn get_ip_country_code(&self) -> &str {
        match self.ip_country_code.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ip_country_code(&mut self) {
        self.ip_country_code.clear();
    }

    pub fn has_ip_country_code(&self) -> bool {
        self.ip_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_country_code(&mut self, v: ::std::string::String) {
        self.ip_country_code = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_country_code(&mut self) -> &mut ::std::string::String {
        if self.ip_country_code.is_none() {
            self.ip_country_code.set_default();
        }
        self.ip_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_country_code(&mut self) -> ::std::string::String {
        self.ip_country_code
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes parental_settings = 22;

    pub fn get_parental_settings(&self) -> &[u8] {
        match self.parental_settings.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_parental_settings(&mut self) {
        self.parental_settings.clear();
    }

    pub fn has_parental_settings(&self) -> bool {
        self.parental_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parental_settings(&mut self, v: ::std::vec::Vec<u8>) {
        self.parental_settings = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parental_settings(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.parental_settings.is_none() {
            self.parental_settings.set_default();
        }
        self.parental_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_parental_settings(&mut self) -> ::std::vec::Vec<u8> {
        self.parental_settings.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes parental_setting_signature = 23;

    pub fn get_parental_setting_signature(&self) -> &[u8] {
        match self.parental_setting_signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_parental_setting_signature(&mut self) {
        self.parental_setting_signature.clear();
    }

    pub fn has_parental_setting_signature(&self) -> bool {
        self.parental_setting_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parental_setting_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.parental_setting_signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parental_setting_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.parental_setting_signature.is_none() {
            self.parental_setting_signature.set_default();
        }
        self.parental_setting_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_parental_setting_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.parental_setting_signature
            .take()
            .unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional int32 count_loginfailures_to_migrate = 24;

    pub fn get_count_loginfailures_to_migrate(&self) -> i32 {
        self.count_loginfailures_to_migrate.unwrap_or(0)
    }
    pub fn clear_count_loginfailures_to_migrate(&mut self) {
        self.count_loginfailures_to_migrate = ::std::option::Option::None;
    }

    pub fn has_count_loginfailures_to_migrate(&self) -> bool {
        self.count_loginfailures_to_migrate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_loginfailures_to_migrate(&mut self, v: i32) {
        self.count_loginfailures_to_migrate = ::std::option::Option::Some(v);
    }

    // optional int32 count_disconnects_to_migrate = 25;

    pub fn get_count_disconnects_to_migrate(&self) -> i32 {
        self.count_disconnects_to_migrate.unwrap_or(0)
    }
    pub fn clear_count_disconnects_to_migrate(&mut self) {
        self.count_disconnects_to_migrate = ::std::option::Option::None;
    }

    pub fn has_count_disconnects_to_migrate(&self) -> bool {
        self.count_disconnects_to_migrate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_disconnects_to_migrate(&mut self, v: i32) {
        self.count_disconnects_to_migrate = ::std::option::Option::Some(v);
    }

    // optional int32 ogs_data_report_time_window = 26;

    pub fn get_ogs_data_report_time_window(&self) -> i32 {
        self.ogs_data_report_time_window.unwrap_or(0)
    }
    pub fn clear_ogs_data_report_time_window(&mut self) {
        self.ogs_data_report_time_window = ::std::option::Option::None;
    }

    pub fn has_ogs_data_report_time_window(&self) -> bool {
        self.ogs_data_report_time_window.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ogs_data_report_time_window(&mut self, v: i32) {
        self.ogs_data_report_time_window = ::std::option::Option::Some(v);
    }

    // optional uint64 client_instance_id = 27;

    pub fn get_client_instance_id(&self) -> u64 {
        self.client_instance_id.unwrap_or(0)
    }
    pub fn clear_client_instance_id(&mut self) {
        self.client_instance_id = ::std::option::Option::None;
    }

    pub fn has_client_instance_id(&self) -> bool {
        self.client_instance_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_instance_id(&mut self, v: u64) {
        self.client_instance_id = ::std::option::Option::Some(v);
    }

    // optional bool force_client_update_check = 28;

    pub fn get_force_client_update_check(&self) -> bool {
        self.force_client_update_check.unwrap_or(false)
    }
    pub fn clear_force_client_update_check(&mut self) {
        self.force_client_update_check = ::std::option::Option::None;
    }

    pub fn has_force_client_update_check(&self) -> bool {
        self.force_client_update_check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_client_update_check(&mut self, v: bool) {
        self.force_client_update_check = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientLogonResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.public_ip {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.eresult = ::std::option::Option::Some(tmp);
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.out_of_game_heartbeat_seconds = ::std::option::Option::Some(tmp);
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.in_game_heartbeat_seconds = ::std::option::Option::Some(tmp);
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.deprecated_public_ip = ::std::option::Option::Some(tmp);
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.rtime32_server_time = ::std::option::Option::Some(tmp);
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.account_flags = ::std::option::Option::Some(tmp);
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cell_id = ::std::option::Option::Some(tmp);
                }
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.email_domain)?;
                }
                9 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.steam2_ticket)?;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.eresult_extended = ::std::option::Option::Some(tmp);
                }
                11 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.webapi_authenticate_user_nonce)?;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cell_id_ping_threshold = ::std::option::Option::Some(tmp);
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deprecated_use_pics = ::std::option::Option::Some(tmp);
                }
                14 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.vanity_url)?;
                }
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_ip)?;
                }
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.client_supplied_steamid = ::std::option::Option::Some(tmp);
                }
                21 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip_country_code)?;
                }
                22 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.parental_settings)?;
                }
                23 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.parental_setting_signature)?;
                }
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.count_loginfailures_to_migrate = ::std::option::Option::Some(tmp);
                }
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.count_disconnects_to_migrate = ::std::option::Option::Some(tmp);
                }
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ogs_data_report_time_window = ::std::option::Option::Some(tmp);
                }
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_instance_id = ::std::option::Option::Some(tmp);
                }
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force_client_update_check = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.out_of_game_heartbeat_seconds {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.in_game_heartbeat_seconds {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.deprecated_public_ip {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.rtime32_server_time {
            my_size += 5;
        }
        if let Some(v) = self.account_flags {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cell_id {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.email_domain.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(ref v) = self.steam2_ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(9, &v);
        }
        if let Some(v) = self.eresult_extended {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.webapi_authenticate_user_nonce.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.cell_id_ping_threshold {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.deprecated_use_pics {
            my_size += 2;
        }
        if let Some(ref v) = self.vanity_url.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(ref v) = self.public_ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.client_supplied_steamid {
            my_size += 10;
        }
        if let Some(ref v) = self.ip_country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(21, &v);
        }
        if let Some(ref v) = self.parental_settings.as_ref() {
            my_size += ::protobuf::rt::bytes_size(22, &v);
        }
        if let Some(ref v) = self.parental_setting_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(23, &v);
        }
        if let Some(v) = self.count_loginfailures_to_migrate {
            my_size += ::protobuf::rt::value_size(24, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.count_disconnects_to_migrate {
            my_size += ::protobuf::rt::value_size(25, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ogs_data_report_time_window {
            my_size += ::protobuf::rt::value_size(26, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_instance_id {
            my_size += ::protobuf::rt::value_size(27, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.force_client_update_check {
            my_size += 3;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.out_of_game_heartbeat_seconds {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.in_game_heartbeat_seconds {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.deprecated_public_ip {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.rtime32_server_time {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.account_flags {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.cell_id {
            os.write_uint32(7, v)?;
        }
        if let Some(ref v) = self.email_domain.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(ref v) = self.steam2_ticket.as_ref() {
            os.write_bytes(9, &v)?;
        }
        if let Some(v) = self.eresult_extended {
            os.write_int32(10, v)?;
        }
        if let Some(ref v) = self.webapi_authenticate_user_nonce.as_ref() {
            os.write_string(11, &v)?;
        }
        if let Some(v) = self.cell_id_ping_threshold {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.deprecated_use_pics {
            os.write_bool(13, v)?;
        }
        if let Some(ref v) = self.vanity_url.as_ref() {
            os.write_string(14, &v)?;
        }
        if let Some(ref v) = self.public_ip.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.client_supplied_steamid {
            os.write_fixed64(20, v)?;
        }
        if let Some(ref v) = self.ip_country_code.as_ref() {
            os.write_string(21, &v)?;
        }
        if let Some(ref v) = self.parental_settings.as_ref() {
            os.write_bytes(22, &v)?;
        }
        if let Some(ref v) = self.parental_setting_signature.as_ref() {
            os.write_bytes(23, &v)?;
        }
        if let Some(v) = self.count_loginfailures_to_migrate {
            os.write_int32(24, v)?;
        }
        if let Some(v) = self.count_disconnects_to_migrate {
            os.write_int32(25, v)?;
        }
        if let Some(v) = self.ogs_data_report_time_window {
            os.write_int32(26, v)?;
        }
        if let Some(v) = self.client_instance_id {
            os.write_uint64(27, v)?;
        }
        if let Some(v) = self.force_client_update_check {
            os.write_bool(28, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientLogonResponse {
        CMsgClientLogonResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "eresult",
                |m: &CMsgClientLogonResponse| &m.eresult,
                |m: &mut CMsgClientLogonResponse| &mut m.eresult,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "out_of_game_heartbeat_seconds",
                |m: &CMsgClientLogonResponse| &m.out_of_game_heartbeat_seconds,
                |m: &mut CMsgClientLogonResponse| &mut m.out_of_game_heartbeat_seconds,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "in_game_heartbeat_seconds",
                |m: &CMsgClientLogonResponse| &m.in_game_heartbeat_seconds,
                |m: &mut CMsgClientLogonResponse| &mut m.in_game_heartbeat_seconds,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "deprecated_public_ip",
                |m: &CMsgClientLogonResponse| &m.deprecated_public_ip,
                |m: &mut CMsgClientLogonResponse| &mut m.deprecated_public_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed32,
            >(
                "rtime32_server_time",
                |m: &CMsgClientLogonResponse| &m.rtime32_server_time,
                |m: &mut CMsgClientLogonResponse| &mut m.rtime32_server_time,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "account_flags",
                |m: &CMsgClientLogonResponse| &m.account_flags,
                |m: &mut CMsgClientLogonResponse| &mut m.account_flags,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "cell_id",
                |m: &CMsgClientLogonResponse| &m.cell_id,
                |m: &mut CMsgClientLogonResponse| &mut m.cell_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "email_domain",
                |m: &CMsgClientLogonResponse| &m.email_domain,
                |m: &mut CMsgClientLogonResponse| &mut m.email_domain,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "steam2_ticket",
                |m: &CMsgClientLogonResponse| &m.steam2_ticket,
                |m: &mut CMsgClientLogonResponse| &mut m.steam2_ticket,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "eresult_extended",
                |m: &CMsgClientLogonResponse| &m.eresult_extended,
                |m: &mut CMsgClientLogonResponse| &mut m.eresult_extended,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "webapi_authenticate_user_nonce",
                |m: &CMsgClientLogonResponse| &m.webapi_authenticate_user_nonce,
                |m: &mut CMsgClientLogonResponse| &mut m.webapi_authenticate_user_nonce,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "cell_id_ping_threshold",
                |m: &CMsgClientLogonResponse| &m.cell_id_ping_threshold,
                |m: &mut CMsgClientLogonResponse| &mut m.cell_id_ping_threshold,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "deprecated_use_pics",
                |m: &CMsgClientLogonResponse| &m.deprecated_use_pics,
                |m: &mut CMsgClientLogonResponse| &mut m.deprecated_use_pics,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "vanity_url",
                |m: &CMsgClientLogonResponse| &m.vanity_url,
                |m: &mut CMsgClientLogonResponse| &mut m.vanity_url,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<super::steammessages_base::CMsgIPAddress>,
            >(
                "public_ip",
                |m: &CMsgClientLogonResponse| &m.public_ip,
                |m: &mut CMsgClientLogonResponse| &mut m.public_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed64,
            >(
                "client_supplied_steamid",
                |m: &CMsgClientLogonResponse| &m.client_supplied_steamid,
                |m: &mut CMsgClientLogonResponse| &mut m.client_supplied_steamid,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "ip_country_code",
                |m: &CMsgClientLogonResponse| &m.ip_country_code,
                |m: &mut CMsgClientLogonResponse| &mut m.ip_country_code,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "parental_settings",
                |m: &CMsgClientLogonResponse| &m.parental_settings,
                |m: &mut CMsgClientLogonResponse| &mut m.parental_settings,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBytes,
            >(
                "parental_setting_signature",
                |m: &CMsgClientLogonResponse| &m.parental_setting_signature,
                |m: &mut CMsgClientLogonResponse| &mut m.parental_setting_signature,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "count_loginfailures_to_migrate",
                |m: &CMsgClientLogonResponse| &m.count_loginfailures_to_migrate,
                |m: &mut CMsgClientLogonResponse| &mut m.count_loginfailures_to_migrate,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "count_disconnects_to_migrate",
                |m: &CMsgClientLogonResponse| &m.count_disconnects_to_migrate,
                |m: &mut CMsgClientLogonResponse| &mut m.count_disconnects_to_migrate,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "ogs_data_report_time_window",
                |m: &CMsgClientLogonResponse| &m.ogs_data_report_time_window,
                |m: &mut CMsgClientLogonResponse| &mut m.ogs_data_report_time_window,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "client_instance_id",
                |m: &CMsgClientLogonResponse| &m.client_instance_id,
                |m: &mut CMsgClientLogonResponse| &mut m.client_instance_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "force_client_update_check",
                |m: &CMsgClientLogonResponse| &m.force_client_update_check,
                |m: &mut CMsgClientLogonResponse| &mut m.force_client_update_check,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientLogonResponse>(
                "CMsgClientLogonResponse",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientLogonResponse {
        static instance: ::protobuf::rt::LazyV2<CMsgClientLogonResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientLogonResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientLogonResponse {
    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.out_of_game_heartbeat_seconds = ::std::option::Option::None;
        self.in_game_heartbeat_seconds = ::std::option::Option::None;
        self.deprecated_public_ip = ::std::option::Option::None;
        self.rtime32_server_time = ::std::option::Option::None;
        self.account_flags = ::std::option::Option::None;
        self.cell_id = ::std::option::Option::None;
        self.email_domain.clear();
        self.steam2_ticket.clear();
        self.eresult_extended = ::std::option::Option::None;
        self.webapi_authenticate_user_nonce.clear();
        self.cell_id_ping_threshold = ::std::option::Option::None;
        self.deprecated_use_pics = ::std::option::Option::None;
        self.vanity_url.clear();
        self.public_ip.clear();
        self.client_supplied_steamid = ::std::option::Option::None;
        self.ip_country_code.clear();
        self.parental_settings.clear();
        self.parental_setting_signature.clear();
        self.count_loginfailures_to_migrate = ::std::option::Option::None;
        self.count_disconnects_to_migrate = ::std::option::Option::None;
        self.ogs_data_report_time_window = ::std::option::Option::None;
        self.client_instance_id = ::std::option::Option::None;
        self.force_client_update_check = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientLogonResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLogonResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientRequestWebAPIAuthenticateUserNonce {
    // message fields
    token_type: ::std::option::Option<i32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientRequestWebAPIAuthenticateUserNonce {
    fn default() -> &'a CMsgClientRequestWebAPIAuthenticateUserNonce {
        <CMsgClientRequestWebAPIAuthenticateUserNonce as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientRequestWebAPIAuthenticateUserNonce {
    pub fn new() -> CMsgClientRequestWebAPIAuthenticateUserNonce {
        ::std::default::Default::default()
    }

    // optional int32 token_type = 1;

    pub fn get_token_type(&self) -> i32 {
        self.token_type.unwrap_or(-1i32)
    }
    pub fn clear_token_type(&mut self) {
        self.token_type = ::std::option::Option::None;
    }

    pub fn has_token_type(&self) -> bool {
        self.token_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_type(&mut self, v: i32) {
        self.token_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientRequestWebAPIAuthenticateUserNonce {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.token_type = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_type {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientRequestWebAPIAuthenticateUserNonce {
        CMsgClientRequestWebAPIAuthenticateUserNonce::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "token_type",
                |m: &CMsgClientRequestWebAPIAuthenticateUserNonce| &m.token_type,
                |m: &mut CMsgClientRequestWebAPIAuthenticateUserNonce| &mut m.token_type,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientRequestWebAPIAuthenticateUserNonce>(
                "CMsgClientRequestWebAPIAuthenticateUserNonce",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientRequestWebAPIAuthenticateUserNonce {
        static instance: ::protobuf::rt::LazyV2<CMsgClientRequestWebAPIAuthenticateUserNonce> =
            ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientRequestWebAPIAuthenticateUserNonce::new)
    }
}

impl ::protobuf::Clear for CMsgClientRequestWebAPIAuthenticateUserNonce {
    fn clear(&mut self) {
        self.token_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientRequestWebAPIAuthenticateUserNonce {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientRequestWebAPIAuthenticateUserNonce {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    // message fields
    eresult: ::std::option::Option<i32>,
    webapi_authenticate_user_nonce: ::protobuf::SingularField<::std::string::String>,
    token_type: ::std::option::Option<i32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    fn default() -> &'a CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
        <CMsgClientRequestWebAPIAuthenticateUserNonceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    pub fn new() -> CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn get_eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }
    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string webapi_authenticate_user_nonce = 11;

    pub fn get_webapi_authenticate_user_nonce(&self) -> &str {
        match self.webapi_authenticate_user_nonce.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_webapi_authenticate_user_nonce(&mut self) {
        self.webapi_authenticate_user_nonce.clear();
    }

    pub fn has_webapi_authenticate_user_nonce(&self) -> bool {
        self.webapi_authenticate_user_nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webapi_authenticate_user_nonce(&mut self, v: ::std::string::String) {
        self.webapi_authenticate_user_nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webapi_authenticate_user_nonce(&mut self) -> &mut ::std::string::String {
        if self.webapi_authenticate_user_nonce.is_none() {
            self.webapi_authenticate_user_nonce.set_default();
        }
        self.webapi_authenticate_user_nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_webapi_authenticate_user_nonce(&mut self) -> ::std::string::String {
        self.webapi_authenticate_user_nonce
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 token_type = 3;

    pub fn get_token_type(&self) -> i32 {
        self.token_type.unwrap_or(-1i32)
    }
    pub fn clear_token_type(&mut self) {
        self.token_type = ::std::option::Option::None;
    }

    pub fn has_token_type(&self) -> bool {
        self.token_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_type(&mut self, v: i32) {
        self.token_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.eresult = ::std::option::Option::Some(tmp);
                }
                11 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.webapi_authenticate_user_nonce)?;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.token_type = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.webapi_authenticate_user_nonce.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.token_type {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(ref v) = self.webapi_authenticate_user_nonce.as_ref() {
            os.write_string(11, &v)?;
        }
        if let Some(v) = self.token_type {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
        CMsgClientRequestWebAPIAuthenticateUserNonceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "eresult",
                |m: &CMsgClientRequestWebAPIAuthenticateUserNonceResponse| &m.eresult,
                |m: &mut CMsgClientRequestWebAPIAuthenticateUserNonceResponse| &mut m.eresult,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "webapi_authenticate_user_nonce",
                |m: &CMsgClientRequestWebAPIAuthenticateUserNonceResponse| &m.webapi_authenticate_user_nonce,
                |m: &mut CMsgClientRequestWebAPIAuthenticateUserNonceResponse| &mut m.webapi_authenticate_user_nonce,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "token_type",
                |m: &CMsgClientRequestWebAPIAuthenticateUserNonceResponse| &m.token_type,
                |m: &mut CMsgClientRequestWebAPIAuthenticateUserNonceResponse| &mut m.token_type,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(
                "CMsgClientRequestWebAPIAuthenticateUserNonceResponse",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
        static instance: ::protobuf::rt::LazyV2<CMsgClientRequestWebAPIAuthenticateUserNonceResponse> =
            ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientRequestWebAPIAuthenticateUserNonceResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.webapi_authenticate_user_nonce.clear();
        self.token_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientLogOff {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientLogOff {
    fn default() -> &'a CMsgClientLogOff {
        <CMsgClientLogOff as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLogOff {
    pub fn new() -> CMsgClientLogOff {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgClientLogOff {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientLogOff {
        CMsgClientLogOff::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientLogOff>(
                "CMsgClientLogOff",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientLogOff {
        static instance: ::protobuf::rt::LazyV2<CMsgClientLogOff> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientLogOff::new)
    }
}

impl ::protobuf::Clear for CMsgClientLogOff {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientLogOff {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLogOff {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientLoggedOff {
    // message fields
    eresult: ::std::option::Option<i32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientLoggedOff {
    fn default() -> &'a CMsgClientLoggedOff {
        <CMsgClientLoggedOff as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLoggedOff {
    pub fn new() -> CMsgClientLoggedOff {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn get_eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }
    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientLoggedOff {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.eresult = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientLoggedOff {
        CMsgClientLoggedOff::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "eresult",
                |m: &CMsgClientLoggedOff| &m.eresult,
                |m: &mut CMsgClientLoggedOff| &mut m.eresult,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientLoggedOff>(
                "CMsgClientLoggedOff",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientLoggedOff {
        static instance: ::protobuf::rt::LazyV2<CMsgClientLoggedOff> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientLoggedOff::new)
    }
}

impl ::protobuf::Clear for CMsgClientLoggedOff {
    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientLoggedOff {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLoggedOff {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientNewLoginKey {
    // message fields
    unique_id: ::std::option::Option<u32>,
    login_key: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientNewLoginKey {
    fn default() -> &'a CMsgClientNewLoginKey {
        <CMsgClientNewLoginKey as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientNewLoginKey {
    pub fn new() -> CMsgClientNewLoginKey {
        ::std::default::Default::default()
    }

    // optional uint32 unique_id = 1;

    pub fn get_unique_id(&self) -> u32 {
        self.unique_id.unwrap_or(0)
    }
    pub fn clear_unique_id(&mut self) {
        self.unique_id = ::std::option::Option::None;
    }

    pub fn has_unique_id(&self) -> bool {
        self.unique_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unique_id(&mut self, v: u32) {
        self.unique_id = ::std::option::Option::Some(v);
    }

    // optional string login_key = 2;

    pub fn get_login_key(&self) -> &str {
        match self.login_key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_login_key(&mut self) {
        self.login_key.clear();
    }

    pub fn has_login_key(&self) -> bool {
        self.login_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_login_key(&mut self, v: ::std::string::String) {
        self.login_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_login_key(&mut self) -> &mut ::std::string::String {
        if self.login_key.is_none() {
            self.login_key.set_default();
        }
        self.login_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_login_key(&mut self) -> ::std::string::String {
        self.login_key.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgClientNewLoginKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.unique_id = ::std::option::Option::Some(tmp);
                }
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.login_key)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.unique_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.login_key.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.unique_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.login_key.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientNewLoginKey {
        CMsgClientNewLoginKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "unique_id",
                |m: &CMsgClientNewLoginKey| &m.unique_id,
                |m: &mut CMsgClientNewLoginKey| &mut m.unique_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "login_key",
                |m: &CMsgClientNewLoginKey| &m.login_key,
                |m: &mut CMsgClientNewLoginKey| &mut m.login_key,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientNewLoginKey>(
                "CMsgClientNewLoginKey",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientNewLoginKey {
        static instance: ::protobuf::rt::LazyV2<CMsgClientNewLoginKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientNewLoginKey::new)
    }
}

impl ::protobuf::Clear for CMsgClientNewLoginKey {
    fn clear(&mut self) {
        self.unique_id = ::std::option::Option::None;
        self.login_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientNewLoginKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientNewLoginKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientNewLoginKeyAccepted {
    // message fields
    unique_id: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientNewLoginKeyAccepted {
    fn default() -> &'a CMsgClientNewLoginKeyAccepted {
        <CMsgClientNewLoginKeyAccepted as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientNewLoginKeyAccepted {
    pub fn new() -> CMsgClientNewLoginKeyAccepted {
        ::std::default::Default::default()
    }

    // optional uint32 unique_id = 1;

    pub fn get_unique_id(&self) -> u32 {
        self.unique_id.unwrap_or(0)
    }
    pub fn clear_unique_id(&mut self) {
        self.unique_id = ::std::option::Option::None;
    }

    pub fn has_unique_id(&self) -> bool {
        self.unique_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unique_id(&mut self, v: u32) {
        self.unique_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientNewLoginKeyAccepted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.unique_id = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.unique_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.unique_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientNewLoginKeyAccepted {
        CMsgClientNewLoginKeyAccepted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "unique_id",
                |m: &CMsgClientNewLoginKeyAccepted| &m.unique_id,
                |m: &mut CMsgClientNewLoginKeyAccepted| &mut m.unique_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientNewLoginKeyAccepted>(
                "CMsgClientNewLoginKeyAccepted",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientNewLoginKeyAccepted {
        static instance: ::protobuf::rt::LazyV2<CMsgClientNewLoginKeyAccepted> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientNewLoginKeyAccepted::new)
    }
}

impl ::protobuf::Clear for CMsgClientNewLoginKeyAccepted {
    fn clear(&mut self) {
        self.unique_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientNewLoginKeyAccepted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientNewLoginKeyAccepted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientAccountInfo {
    // message fields
    persona_name: ::protobuf::SingularField<::std::string::String>,
    ip_country: ::protobuf::SingularField<::std::string::String>,
    count_authed_computers: ::std::option::Option<i32>,
    account_flags: ::std::option::Option<u32>,
    facebook_id: ::std::option::Option<u64>,
    facebook_name: ::protobuf::SingularField<::std::string::String>,
    steamguard_notify_newmachines: ::std::option::Option<bool>,
    steamguard_machine_name_user_chosen: ::protobuf::SingularField<::std::string::String>,
    is_phone_verified: ::std::option::Option<bool>,
    two_factor_state: ::std::option::Option<u32>,
    is_phone_identifying: ::std::option::Option<bool>,
    is_phone_needing_reverify: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientAccountInfo {
    fn default() -> &'a CMsgClientAccountInfo {
        <CMsgClientAccountInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientAccountInfo {
    pub fn new() -> CMsgClientAccountInfo {
        ::std::default::Default::default()
    }

    // optional string persona_name = 1;

    pub fn get_persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_persona_name(&mut self) {
        self.persona_name.clear();
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name.set_default();
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string ip_country = 2;

    pub fn get_ip_country(&self) -> &str {
        match self.ip_country.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ip_country(&mut self) {
        self.ip_country.clear();
    }

    pub fn has_ip_country(&self) -> bool {
        self.ip_country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_country(&mut self, v: ::std::string::String) {
        self.ip_country = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_country(&mut self) -> &mut ::std::string::String {
        if self.ip_country.is_none() {
            self.ip_country.set_default();
        }
        self.ip_country.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_country(&mut self) -> ::std::string::String {
        self.ip_country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 count_authed_computers = 5;

    pub fn get_count_authed_computers(&self) -> i32 {
        self.count_authed_computers.unwrap_or(0)
    }
    pub fn clear_count_authed_computers(&mut self) {
        self.count_authed_computers = ::std::option::Option::None;
    }

    pub fn has_count_authed_computers(&self) -> bool {
        self.count_authed_computers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_authed_computers(&mut self, v: i32) {
        self.count_authed_computers = ::std::option::Option::Some(v);
    }

    // optional uint32 account_flags = 7;

    pub fn get_account_flags(&self) -> u32 {
        self.account_flags.unwrap_or(0)
    }
    pub fn clear_account_flags(&mut self) {
        self.account_flags = ::std::option::Option::None;
    }

    pub fn has_account_flags(&self) -> bool {
        self.account_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_flags(&mut self, v: u32) {
        self.account_flags = ::std::option::Option::Some(v);
    }

    // optional uint64 facebook_id = 8;

    pub fn get_facebook_id(&self) -> u64 {
        self.facebook_id.unwrap_or(0)
    }
    pub fn clear_facebook_id(&mut self) {
        self.facebook_id = ::std::option::Option::None;
    }

    pub fn has_facebook_id(&self) -> bool {
        self.facebook_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_facebook_id(&mut self, v: u64) {
        self.facebook_id = ::std::option::Option::Some(v);
    }

    // optional string facebook_name = 9;

    pub fn get_facebook_name(&self) -> &str {
        match self.facebook_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_facebook_name(&mut self) {
        self.facebook_name.clear();
    }

    pub fn has_facebook_name(&self) -> bool {
        self.facebook_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_facebook_name(&mut self, v: ::std::string::String) {
        self.facebook_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_facebook_name(&mut self) -> &mut ::std::string::String {
        if self.facebook_name.is_none() {
            self.facebook_name.set_default();
        }
        self.facebook_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_facebook_name(&mut self) -> ::std::string::String {
        self.facebook_name
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool steamguard_notify_newmachines = 14;

    pub fn get_steamguard_notify_newmachines(&self) -> bool {
        self.steamguard_notify_newmachines.unwrap_or(false)
    }
    pub fn clear_steamguard_notify_newmachines(&mut self) {
        self.steamguard_notify_newmachines = ::std::option::Option::None;
    }

    pub fn has_steamguard_notify_newmachines(&self) -> bool {
        self.steamguard_notify_newmachines.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamguard_notify_newmachines(&mut self, v: bool) {
        self.steamguard_notify_newmachines = ::std::option::Option::Some(v);
    }

    // optional string steamguard_machine_name_user_chosen = 15;

    pub fn get_steamguard_machine_name_user_chosen(&self) -> &str {
        match self.steamguard_machine_name_user_chosen.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_steamguard_machine_name_user_chosen(&mut self) {
        self.steamguard_machine_name_user_chosen.clear();
    }

    pub fn has_steamguard_machine_name_user_chosen(&self) -> bool {
        self.steamguard_machine_name_user_chosen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamguard_machine_name_user_chosen(&mut self, v: ::std::string::String) {
        self.steamguard_machine_name_user_chosen = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steamguard_machine_name_user_chosen(&mut self) -> &mut ::std::string::String {
        if self.steamguard_machine_name_user_chosen.is_none() {
            self.steamguard_machine_name_user_chosen.set_default();
        }
        self.steamguard_machine_name_user_chosen.as_mut().unwrap()
    }

    // Take field
    pub fn take_steamguard_machine_name_user_chosen(&mut self) -> ::std::string::String {
        self.steamguard_machine_name_user_chosen
            .take()
            .unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_phone_verified = 16;

    pub fn get_is_phone_verified(&self) -> bool {
        self.is_phone_verified.unwrap_or(false)
    }
    pub fn clear_is_phone_verified(&mut self) {
        self.is_phone_verified = ::std::option::Option::None;
    }

    pub fn has_is_phone_verified(&self) -> bool {
        self.is_phone_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_verified(&mut self, v: bool) {
        self.is_phone_verified = ::std::option::Option::Some(v);
    }

    // optional uint32 two_factor_state = 17;

    pub fn get_two_factor_state(&self) -> u32 {
        self.two_factor_state.unwrap_or(0)
    }
    pub fn clear_two_factor_state(&mut self) {
        self.two_factor_state = ::std::option::Option::None;
    }

    pub fn has_two_factor_state(&self) -> bool {
        self.two_factor_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two_factor_state(&mut self, v: u32) {
        self.two_factor_state = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_identifying = 18;

    pub fn get_is_phone_identifying(&self) -> bool {
        self.is_phone_identifying.unwrap_or(false)
    }
    pub fn clear_is_phone_identifying(&mut self) {
        self.is_phone_identifying = ::std::option::Option::None;
    }

    pub fn has_is_phone_identifying(&self) -> bool {
        self.is_phone_identifying.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_identifying(&mut self, v: bool) {
        self.is_phone_identifying = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_needing_reverify = 19;

    pub fn get_is_phone_needing_reverify(&self) -> bool {
        self.is_phone_needing_reverify.unwrap_or(false)
    }
    pub fn clear_is_phone_needing_reverify(&mut self) {
        self.is_phone_needing_reverify = ::std::option::Option::None;
    }

    pub fn has_is_phone_needing_reverify(&self) -> bool {
        self.is_phone_needing_reverify.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_needing_reverify(&mut self, v: bool) {
        self.is_phone_needing_reverify = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientAccountInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.persona_name)?;
                }
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip_country)?;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.count_authed_computers = ::std::option::Option::Some(tmp);
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.account_flags = ::std::option::Option::Some(tmp);
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.facebook_id = ::std::option::Option::Some(tmp);
                }
                9 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.facebook_name)?;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.steamguard_notify_newmachines = ::std::option::Option::Some(tmp);
                }
                15 => {
                    ::protobuf::rt::read_singular_string_into(
                        wire_type,
                        is,
                        &mut self.steamguard_machine_name_user_chosen,
                    )?;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_phone_verified = ::std::option::Option::Some(tmp);
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.two_factor_state = ::std::option::Option::Some(tmp);
                }
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_phone_identifying = ::std::option::Option::Some(tmp);
                }
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_phone_needing_reverify = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.persona_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.ip_country.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.count_authed_computers {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.account_flags {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.facebook_id {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.facebook_name.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.steamguard_notify_newmachines {
            my_size += 2;
        }
        if let Some(ref v) = self.steamguard_machine_name_user_chosen.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.is_phone_verified {
            my_size += 3;
        }
        if let Some(v) = self.two_factor_state {
            my_size += ::protobuf::rt::value_size(17, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_phone_identifying {
            my_size += 3;
        }
        if let Some(v) = self.is_phone_needing_reverify {
            my_size += 3;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.persona_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.ip_country.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.count_authed_computers {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.account_flags {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.facebook_id {
            os.write_uint64(8, v)?;
        }
        if let Some(ref v) = self.facebook_name.as_ref() {
            os.write_string(9, &v)?;
        }
        if let Some(v) = self.steamguard_notify_newmachines {
            os.write_bool(14, v)?;
        }
        if let Some(ref v) = self.steamguard_machine_name_user_chosen.as_ref() {
            os.write_string(15, &v)?;
        }
        if let Some(v) = self.is_phone_verified {
            os.write_bool(16, v)?;
        }
        if let Some(v) = self.two_factor_state {
            os.write_uint32(17, v)?;
        }
        if let Some(v) = self.is_phone_identifying {
            os.write_bool(18, v)?;
        }
        if let Some(v) = self.is_phone_needing_reverify {
            os.write_bool(19, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientAccountInfo {
        CMsgClientAccountInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "persona_name",
                |m: &CMsgClientAccountInfo| &m.persona_name,
                |m: &mut CMsgClientAccountInfo| &mut m.persona_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "ip_country",
                |m: &CMsgClientAccountInfo| &m.ip_country,
                |m: &mut CMsgClientAccountInfo| &mut m.ip_country,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "count_authed_computers",
                |m: &CMsgClientAccountInfo| &m.count_authed_computers,
                |m: &mut CMsgClientAccountInfo| &mut m.count_authed_computers,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "account_flags",
                |m: &CMsgClientAccountInfo| &m.account_flags,
                |m: &mut CMsgClientAccountInfo| &mut m.account_flags,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "facebook_id",
                |m: &CMsgClientAccountInfo| &m.facebook_id,
                |m: &mut CMsgClientAccountInfo| &mut m.facebook_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "facebook_name",
                |m: &CMsgClientAccountInfo| &m.facebook_name,
                |m: &mut CMsgClientAccountInfo| &mut m.facebook_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "steamguard_notify_newmachines",
                |m: &CMsgClientAccountInfo| &m.steamguard_notify_newmachines,
                |m: &mut CMsgClientAccountInfo| &mut m.steamguard_notify_newmachines,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "steamguard_machine_name_user_chosen",
                |m: &CMsgClientAccountInfo| &m.steamguard_machine_name_user_chosen,
                |m: &mut CMsgClientAccountInfo| &mut m.steamguard_machine_name_user_chosen,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "is_phone_verified",
                |m: &CMsgClientAccountInfo| &m.is_phone_verified,
                |m: &mut CMsgClientAccountInfo| &mut m.is_phone_verified,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "two_factor_state",
                |m: &CMsgClientAccountInfo| &m.two_factor_state,
                |m: &mut CMsgClientAccountInfo| &mut m.two_factor_state,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "is_phone_identifying",
                |m: &CMsgClientAccountInfo| &m.is_phone_identifying,
                |m: &mut CMsgClientAccountInfo| &mut m.is_phone_identifying,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "is_phone_needing_reverify",
                |m: &CMsgClientAccountInfo| &m.is_phone_needing_reverify,
                |m: &mut CMsgClientAccountInfo| &mut m.is_phone_needing_reverify,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientAccountInfo>(
                "CMsgClientAccountInfo",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientAccountInfo {
        static instance: ::protobuf::rt::LazyV2<CMsgClientAccountInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientAccountInfo::new)
    }
}

impl ::protobuf::Clear for CMsgClientAccountInfo {
    fn clear(&mut self) {
        self.persona_name.clear();
        self.ip_country.clear();
        self.count_authed_computers = ::std::option::Option::None;
        self.account_flags = ::std::option::Option::None;
        self.facebook_id = ::std::option::Option::None;
        self.facebook_name.clear();
        self.steamguard_notify_newmachines = ::std::option::Option::None;
        self.steamguard_machine_name_user_chosen.clear();
        self.is_phone_verified = ::std::option::Option::None;
        self.two_factor_state = ::std::option::Option::None;
        self.is_phone_identifying = ::std::option::Option::None;
        self.is_phone_needing_reverify = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientAccountInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientAccountInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientChallengeRequest {
    // message fields
    steamid: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientChallengeRequest {
    fn default() -> &'a CMsgClientChallengeRequest {
        <CMsgClientChallengeRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientChallengeRequest {
    pub fn new() -> CMsgClientChallengeRequest {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientChallengeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientChallengeRequest {
        CMsgClientChallengeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed64,
            >(
                "steamid",
                |m: &CMsgClientChallengeRequest| &m.steamid,
                |m: &mut CMsgClientChallengeRequest| &mut m.steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientChallengeRequest>(
                "CMsgClientChallengeRequest",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientChallengeRequest {
        static instance: ::protobuf::rt::LazyV2<CMsgClientChallengeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientChallengeRequest::new)
    }
}

impl ::protobuf::Clear for CMsgClientChallengeRequest {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientChallengeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientChallengeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgClientChallengeResponse {
    // message fields
    challenge: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientChallengeResponse {
    fn default() -> &'a CMsgClientChallengeResponse {
        <CMsgClientChallengeResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientChallengeResponse {
    pub fn new() -> CMsgClientChallengeResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 challenge = 1;

    pub fn get_challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }
    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientChallengeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.challenge = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.challenge {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.challenge {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientChallengeResponse {
        CMsgClientChallengeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFixed64,
            >(
                "challenge",
                |m: &CMsgClientChallengeResponse| &m.challenge,
                |m: &mut CMsgClientChallengeResponse| &mut m.challenge,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgClientChallengeResponse>(
                "CMsgClientChallengeResponse",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CMsgClientChallengeResponse {
        static instance: ::protobuf::rt::LazyV2<CMsgClientChallengeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgClientChallengeResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientChallengeResponse {
    fn clear(&mut self) {
        self.challenge = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientChallengeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientChallengeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&steammessages_clientserver_login.proto\x1a\x18steammessages_base.prot\
    o\"\x15\n\x13CMsgClientHeartBeat\"\\\n\x20CMsgClientServerTimestampReque\
    st\x128\n\x18client_request_timestamp\x18\x01\x20\x01(\x04R\x16clientReq\
    uestTimestamp\"\x8d\x01\n!CMsgClientServerTimestampResponse\x128\n\x18cl\
    ient_request_timestamp\x18\x01\x20\x01(\x04R\x16clientRequestTimestamp\
    \x12.\n\x13server_timestamp_ms\x18\x02\x20\x01(\x04R\x11serverTimestampM\
    s\"\x88\x01\n\x10CMsgClientSecret\x12\x18\n\x07version\x18\x01\x20\x01(\
    \rR\x07version\x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12\x1a\n\
    \x08deviceid\x18\x03\x20\x01(\rR\x08deviceid\x12\x14\n\x05nonce\x18\x04\
    \x20\x01(\x06R\x05nonce\x12\x12\n\x04hmac\x18\x05\x20\x01(\x0cR\x04hmac\
    \"\x93\x13\n\x0fCMsgClientLogon\x12)\n\x10protocol_version\x18\x01\x20\
    \x01(\rR\x0fprotocolVersion\x12K\n\"deprecated_obfustucated_private_ip\
    \x18\x02\x20\x01(\rR\x1fdeprecatedObfustucatedPrivateIp\x12\x17\n\x07cel\
    l_id\x18\x03\x20\x01(\rR\x06cellId\x12&\n\x0flast_session_id\x18\x04\x20\
    \x01(\rR\rlastSessionId\x124\n\x16client_package_version\x18\x05\x20\x01\
    (\rR\x14clientPackageVersion\x12'\n\x0fclient_language\x18\x06\x20\x01(\
    \tR\x0eclientLanguage\x12$\n\x0eclient_os_type\x18\x07\x20\x01(\rR\x0ccl\
    ientOsType\x12?\n\x18should_remember_password\x18\x08\x20\x01(\x08:\x05f\
    alseR\x16shouldRememberPassword\x12!\n\x0cwine_version\x18\t\x20\x01(\tR\
    \x0bwineVersion\x12#\n\rdeprecated_10\x18\n\x20\x01(\rR\x0cdeprecated10\
    \x12B\n\x15obfuscated_private_ip\x18\x0b\x20\x01(\x0b2\x0e.CMsgIPAddress\
    R\x13obfuscatedPrivateIp\x120\n\x14deprecated_public_ip\x18\x14\x20\x01(\
    \rR\x12deprecatedPublicIp\x12\x1b\n\tqos_level\x18\x15\x20\x01(\rR\x08qo\
    sLevel\x127\n\x18client_supplied_steam_id\x18\x16\x20\x01(\x06R\x15clien\
    tSuppliedSteamId\x12+\n\tpublic_ip\x18\x17\x20\x01(\x0b2\x0e.CMsgIPAddre\
    ssR\x08publicIp\x12\x1d\n\nmachine_id\x18\x1e\x20\x01(\x0cR\tmachineId\
    \x12&\n\rlauncher_type\x18\x1f\x20\x01(\r:\x010R\x0clauncherType\x12\x1a\
    \n\x07ui_mode\x18\x20\x20\x01(\r:\x010R\x06uiMode\x12\x1e\n\tchat_mode\
    \x18!\x20\x01(\r:\x010R\x08chatMode\x12,\n\x12steam2_auth_ticket\x18)\
    \x20\x01(\x0cR\x10steam2AuthTicket\x12#\n\remail_address\x18*\x20\x01(\t\
    R\x0cemailAddress\x128\n\x18rtime32_account_creation\x18+\x20\x01(\x07R\
    \x16rtime32AccountCreation\x12!\n\x0caccount_name\x182\x20\x01(\tR\x0bac\
    countName\x12\x1a\n\x08password\x183\x20\x01(\tR\x08password\x12*\n\x11g\
    ame_server_token\x184\x20\x01(\tR\x0fgameServerToken\x12\x1b\n\tlogin_ke\
    y\x18<\x20\x01(\tR\x08loginKey\x12F\n\x1cwas_converted_deprecated_msg\
    \x18F\x20\x01(\x08:\x05falseR\x19wasConvertedDeprecatedMsg\x12@\n\x1dano\
    n_user_target_account_name\x18P\x20\x01(\tR\x19anonUserTargetAccountName\
    \x123\n\x16resolved_user_steam_id\x18Q\x20\x01(\x06R\x13resolvedUserStea\
    mId\x12-\n\x12eresult_sentryfile\x18R\x20\x01(\x05R\x11eresultSentryfile\
    \x12%\n\x0esha_sentryfile\x18S\x20\x01(\x0cR\rshaSentryfile\x12\x1b\n\ta\
    uth_code\x18T\x20\x01(\tR\x08authCode\x12\x19\n\x08otp_type\x18U\x20\x01\
    (\x05R\x07otpType\x12\x1b\n\totp_value\x18V\x20\x01(\rR\x08otpValue\x12%\
    \n\x0eotp_identifier\x18W\x20\x01(\tR\rotpIdentifier\x122\n\x15steam2_ti\
    cket_request\x18X\x20\x01(\x08R\x13steam2TicketRequest\x12&\n\x0fsony_ps\
    n_ticket\x18Z\x20\x01(\x0cR\rsonyPsnTicket\x12-\n\x13sony_psn_service_id\
    \x18[\x20\x01(\tR\x10sonyPsnServiceId\x12Y\n'create_new_psn_linked_accou\
    nt_if_needed\x18\\\x20\x01(\x08:\x05falseR!createNewPsnLinkedAccountIfNe\
    eded\x12\"\n\rsony_psn_name\x18]\x20\x01(\tR\x0bsonyPsnName\x12+\n\x12ga\
    me_server_app_id\x18^\x20\x01(\x05R\x0fgameServerAppId\x12I\n!steamguard\
    _dont_remember_computer\x18_\x20\x01(\x08R\x1esteamguardDontRememberComp\
    uter\x12!\n\x0cmachine_name\x18`\x20\x01(\tR\x0bmachineName\x126\n\x17ma\
    chine_name_userchosen\x18a\x20\x01(\tR\x15machineNameUserchosen\x12)\n\
    \x10country_override\x18b\x20\x01(\tR\x0fcountryOverride\x12\x20\n\x0cis\
    _steam_box\x18c\x20\x01(\x08R\nisSteamBox\x12,\n\x12client_instance_id\
    \x18d\x20\x01(\x04R\x10clientInstanceId\x12&\n\x0ftwo_factor_code\x18e\
    \x20\x01(\tR\rtwoFactorCode\x12?\n\x1csupports_rate_limit_response\x18f\
    \x20\x01(\x08R\x19supportsRateLimitResponse\x12&\n\x0fweb_logon_nonce\
    \x18g\x20\x01(\tR\rwebLogonNonce\x12'\n\x0fpriority_reason\x18h\x20\x01(\
    \x05R\x0epriorityReason\x12G\n\x16embedded_client_secret\x18i\x20\x01(\
    \x0b2\x11.CMsgClientSecretR\x14embeddedClientSecret\x12<\n\x1adisable_pa\
    rtner_autogrants\x18j\x20\x01(\x08R\x18disablePartnerAutogrants\"\xb4\t\
    \n\x17CMsgClientLogonResponse\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\
    \x012R\x07eresult\x12@\n\x1dout_of_game_heartbeat_seconds\x18\x02\x20\
    \x01(\x05R\x19outOfGameHeartbeatSeconds\x129\n\x19in_game_heartbeat_seco\
    nds\x18\x03\x20\x01(\x05R\x16inGameHeartbeatSeconds\x120\n\x14deprecated\
    _public_ip\x18\x04\x20\x01(\rR\x12deprecatedPublicIp\x12.\n\x13rtime32_s\
    erver_time\x18\x05\x20\x01(\x07R\x11rtime32ServerTime\x12#\n\raccount_fl\
    ags\x18\x06\x20\x01(\rR\x0caccountFlags\x12\x17\n\x07cell_id\x18\x07\x20\
    \x01(\rR\x06cellId\x12!\n\x0cemail_domain\x18\x08\x20\x01(\tR\x0bemailDo\
    main\x12#\n\rsteam2_ticket\x18\t\x20\x01(\x0cR\x0csteam2Ticket\x12)\n\
    \x10eresult_extended\x18\n\x20\x01(\x05R\x0feresultExtended\x12C\n\x1ewe\
    bapi_authenticate_user_nonce\x18\x0b\x20\x01(\tR\x1bwebapiAuthenticateUs\
    erNonce\x123\n\x16cell_id_ping_threshold\x18\x0c\x20\x01(\rR\x13cellIdPi\
    ngThreshold\x12.\n\x13deprecated_use_pics\x18\r\x20\x01(\x08R\x11depreca\
    tedUsePics\x12\x1d\n\nvanity_url\x18\x0e\x20\x01(\tR\tvanityUrl\x12+\n\t\
    public_ip\x18\x0f\x20\x01(\x0b2\x0e.CMsgIPAddressR\x08publicIp\x126\n\
    \x17client_supplied_steamid\x18\x14\x20\x01(\x06R\x15clientSuppliedSteam\
    id\x12&\n\x0fip_country_code\x18\x15\x20\x01(\tR\ripCountryCode\x12+\n\
    \x11parental_settings\x18\x16\x20\x01(\x0cR\x10parentalSettings\x12<\n\
    \x1aparental_setting_signature\x18\x17\x20\x01(\x0cR\x18parentalSettingS\
    ignature\x12C\n\x1ecount_loginfailures_to_migrate\x18\x18\x20\x01(\x05R\
    \x1bcountLoginfailuresToMigrate\x12?\n\x1ccount_disconnects_to_migrate\
    \x18\x19\x20\x01(\x05R\x19countDisconnectsToMigrate\x12<\n\x1bogs_data_r\
    eport_time_window\x18\x1a\x20\x01(\x05R\x17ogsDataReportTimeWindow\x12,\
    \n\x12client_instance_id\x18\x1b\x20\x01(\x04R\x10clientInstanceId\x129\
    \n\x19force_client_update_check\x18\x1c\x20\x01(\x08R\x16forceClientUpda\
    teCheck\"Q\n,CMsgClientRequestWebAPIAuthenticateUserNonce\x12!\n\ntoken_\
    type\x18\x01\x20\x01(\x05:\x02-1R\ttokenType\"\xbb\x01\n4CMsgClientReque\
    stWebAPIAuthenticateUserNonceResponse\x12\x1b\n\x07eresult\x18\x01\x20\
    \x01(\x05:\x012R\x07eresult\x12C\n\x1ewebapi_authenticate_user_nonce\x18\
    \x0b\x20\x01(\tR\x1bwebapiAuthenticateUserNonce\x12!\n\ntoken_type\x18\
    \x03\x20\x01(\x05:\x02-1R\ttokenType\"\x12\n\x10CMsgClientLogOff\"2\n\
    \x13CMsgClientLoggedOff\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\
    \x07eresult\"Q\n\x15CMsgClientNewLoginKey\x12\x1b\n\tunique_id\x18\x01\
    \x20\x01(\rR\x08uniqueId\x12\x1b\n\tlogin_key\x18\x02\x20\x01(\tR\x08log\
    inKey\"<\n\x1dCMsgClientNewLoginKeyAccepted\x12\x1b\n\tunique_id\x18\x01\
    \x20\x01(\rR\x08uniqueId\"\xcf\x04\n\x15CMsgClientAccountInfo\x12!\n\x0c\
    persona_name\x18\x01\x20\x01(\tR\x0bpersonaName\x12\x1d\n\nip_country\
    \x18\x02\x20\x01(\tR\tipCountry\x124\n\x16count_authed_computers\x18\x05\
    \x20\x01(\x05R\x14countAuthedComputers\x12#\n\raccount_flags\x18\x07\x20\
    \x01(\rR\x0caccountFlags\x12\x1f\n\x0bfacebook_id\x18\x08\x20\x01(\x04R\
    \nfacebookId\x12#\n\rfacebook_name\x18\t\x20\x01(\tR\x0cfacebookName\x12\
    B\n\x1dsteamguard_notify_newmachines\x18\x0e\x20\x01(\x08R\x1bsteamguard\
    NotifyNewmachines\x12L\n#steamguard_machine_name_user_chosen\x18\x0f\x20\
    \x01(\tR\x1fsteamguardMachineNameUserChosen\x12*\n\x11is_phone_verified\
    \x18\x10\x20\x01(\x08R\x0fisPhoneVerified\x12(\n\x10two_factor_state\x18\
    \x11\x20\x01(\rR\x0etwoFactorState\x120\n\x14is_phone_identifying\x18\
    \x12\x20\x01(\x08R\x12isPhoneIdentifying\x129\n\x19is_phone_needing_reve\
    rify\x18\x13\x20\x01(\x08R\x16isPhoneNeedingReverify\"6\n\x1aCMsgClientC\
    hallengeRequest\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\";\
    \n\x1bCMsgClientChallengeResponse\x12\x1c\n\tchallenge\x18\x01\x20\x01(\
    \x06R\tchallengeB\x05H\x01\x80\x01\0\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> =
    ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| parse_descriptor_proto())
}
